{
  "address": "0x25b406faeD1AD18470664B6258675bDBCCc4Aa49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6f7ca6f4905882bb7f7f2aee145f0ad9921a613fa79e229f89bdf7dc48d4b32",
  "receipt": {
    "to": null,
    "from": "0x85d206e8726575B321a29890c1BD8393C6EB2355",
    "contractAddress": "0x25b406faeD1AD18470664B6258675bDBCCc4Aa49",
    "transactionIndex": 17,
    "gasUsed": "352872",
    "logsBloom": "0x
    "blockHash": "0xe3bf54063a2b138f1343be1d5a41e5863c709ac2b699b89736609ed55dd1e1be",
    "transactionHash": "0xd6f7ca6f4905882bb7f7f2aee145f0ad9921a613fa79e229f89bdf7dc48d4b32",
    "logs": [],
    "blockNumber": 9546310,
    "cumulativeGasUsed": "775767",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e22cacefc27a10566e9df258e033cfdf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/OutputVerifier.sol\":\"OutputVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/verifiers/OutputVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract OutputVerifier {\\n    // Scalar field size\\n    uint256 constant r =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax =\\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay =\\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 =\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 =\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 =\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 =\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    uint256 constant IC0x =\\n        1683237225823114434475890574383752547954072352828691693424657766749909930157;\\n    uint256 constant IC0y =\\n        10110230595513512447464523409088479123880299917968738755747969449083376759640;\\n\\n    uint256 constant IC1x =\\n        4056418060501632235230320772714212416570094334995124498323336691459959999359;\\n    uint256 constant IC1y =\\n        21643569436575009513875246258150055494694779099518902792361106450376709368816;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[1] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(\\n                    add(_pPairing, 32),\\n                    mod(sub(q, calldataload(add(pA, 32))), q)\\n                )\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(\\n                    sub(gas(), 2000),\\n                    8,\\n                    _pPairing,\\n                    768,\\n                    _pPairing,\\n                    0x20\\n                )\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf43402a1cd129fa57ba58e8f7ab46da97a578cf2a8fbcab9777b3d735c467ab\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5061056b8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104cf565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f03b8adb2b5fcf89492b635cd9b1b6396cfabc8d790505f4f503d3a009931d0ad85527f165a300f18f3b5af7ddbe037720af450b5041495d9a4e925bb3ef433b72bf35860208601526000608086018661019a87357f2fd9d380c50de2b59ef8255b29099d94b7072b357d81ec4caf48dd74fafbebf07f08f7d9ec329de7d87e61bdd095b4a489e67b5c296175925ffc36096fd03ecb7f84610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f602084013561005e565b6104ac818486888a6100fd565b90508060005260206000f35b80604081018310156104c957600080fd5b92915050565b6000806000806101208086880312156104e757600080fd5b6104f187876104b8565b945060c086018781111561050457600080fd5b60408701945061051488826104b8565b93505086818701111561052657600080fd5b5092959194509261010001915056fea2646970667358221220765b0b029e2c822dbd4fbdb697da41bac3b3a6c22a310573b2a9880943d6d95c64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104cf565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f03b8adb2b5fcf89492b635cd9b1b6396cfabc8d790505f4f503d3a009931d0ad85527f165a300f18f3b5af7ddbe037720af450b5041495d9a4e925bb3ef433b72bf35860208601526000608086018661019a87357f2fd9d380c50de2b59ef8255b29099d94b7072b357d81ec4caf48dd74fafbebf07f08f7d9ec329de7d87e61bdd095b4a489e67b5c296175925ffc36096fd03ecb7f84610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f602084013561005e565b6104ac818486888a6100fd565b90508060005260206000f35b80604081018310156104c957600080fd5b92915050565b6000806000806101208086880312156104e757600080fd5b6104f187876104b8565b945060c086018781111561050457600080fd5b60408701945061051488826104b8565b93505086818701111561052657600080fd5b5092959194509261010001915056fea2646970667358221220765b0b029e2c822dbd4fbdb697da41bac3b3a6c22a310573b2a9880943d6d95c64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}