{
  "address": "0xC60B012f38017f512D2069aE3210Ad36075ACA6f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spendVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleHasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowlistedRemotes",
          "type": "address[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_allowlistedChains",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "NewCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "NewNullifier",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "addSupportedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetToAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct CircomExample.SpendProof[]",
          "name": "_spendProof",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct CircomExample.OutputProof[]",
          "name": "_outputProofs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bpk",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_root",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outputVerifier",
      "outputs": [
        {
          "internalType": "contract OutputVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "outputVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_s",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_R",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_A",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sigVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spendVerifier",
      "outputs": [
        {
          "internalType": "contract SpendVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "spendVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct CircomExample.SpendProof[]",
          "name": "_spendProof",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct CircomExample.OutputProof[]",
          "name": "_outputProofs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bpk",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_root",
          "type": "uint256"
        }
      ],
      "name": "transact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_remoteAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "updateAllowlistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "updateGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct CircomExample.SpendProof[]",
          "name": "_spendProof",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct CircomExample.OutputProof[]",
          "name": "_outputProofs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bpk",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_root",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d05c81e6af43c44a5cc1d1bcac379dc8833ea0318b739343f3bf3a8e35bb7a4",
  "receipt": {
    "to": null,
    "from": "0x85d206e8726575B321a29890c1BD8393C6EB2355",
    "contractAddress": "0xC60B012f38017f512D2069aE3210Ad36075ACA6f",
    "transactionIndex": 5,
    "gasUsed": "3573488",
    "logsBloom": "0x
    "blockHash": "0x554f3ad712d0e5a9aa49660d1f440072bf39de8a59caee5a06dad3dbe8725220",
    "transactionHash": "0x7d05c81e6af43c44a5cc1d1bcac379dc8833ea0318b739343f3bf3a8e35bb7a4",
    "logs": [],
    "blockNumber": 9546320,
    "cumulativeGasUsed": "4309995",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0492133d98f7B759a16E652C7c2ed37aac483300",
    "0x25b406faeD1AD18470664B6258675bDBCCc4Aa49",
    "0xe57CF63ec58FeF6600f192f4C6A5B9E3B22B6774",
    "0xD3b06cEbF099CE7DA4AcCf578aaebFDBd6e88a93",
    [],
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "22f06309edced4e59d29b88876624a92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spendVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleHasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowlistedRemotes\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_allowlistedChains\",\"type\":\"uint64[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"NewCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"NewNullifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"addSupportedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"allowlistChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetToAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct CircomExample.SpendProof[]\",\"name\":\"_spendProof\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct CircomExample.OutputProof[]\",\"name\":\"_outputProofs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bpk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_root\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nullifierHash\",\"type\":\"uint256\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputVerifier\",\"outputs\":[{\"internalType\":\"contract OutputVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"outputVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_s\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_R\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_A\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sigVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendVerifier\",\"outputs\":[{\"internalType\":\"contract SpendVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"spendVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct CircomExample.SpendProof[]\",\"name\":\"_spendProof\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct CircomExample.OutputProof[]\",\"name\":\"_outputProofs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bpk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_root\",\"type\":\"uint256\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remoteAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowlistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct CircomExample.SpendProof[]\",\"name\":\"_spendProof\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct CircomExample.OutputProof[]\",\"name\":\"_outputProofs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bpk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_root\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns Poseidon(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"router()\":{\"notice\":\"Chainlink CCIP Router Address - used to send messages across chains\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RK.sol\":\"RK\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/CircomExample.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport {MultiplierVerifier} from \\\"./verifiers/MultiplierVerifier.sol\\\";\\nimport {SpendVerifier} from \\\"./verifiers/SpendVerifier.sol\\\";\\nimport {OutputVerifier} from \\\"./verifiers/OutputVerifier.sol\\\";\\n\\nimport {MerkleTreeWithHistory} from \\\"./MerkleTreeWithHistory.sol\\\";\\n\\nimport \\\"./EdOnBN254.sol\\\";\\n\\ncontract CircomExample is MerkleTreeWithHistory {\\n    using EdOnBN254 for *;\\n\\n    SpendVerifier public spendVerifier;\\n    OutputVerifier public outputVerifier;\\n\\n    event NewCommitment(\\n        uint256 indexed commitment,\\n        uint256 indexed index,\\n        bytes encryptedOutput\\n    );\\n\\n    event NewNullifier(uint256 indexed nullifier);\\n\\n    mapping(uint256 => bool) public nullifierHashes;\\n\\n    struct SpendProof {\\n        bytes proof;\\n        uint256 nullifier;\\n        uint[2] valueCommitment;\\n    }\\n\\n    struct OutputProof {\\n        bytes proof;\\n        uint256 commitment;\\n        uint[2] valueCommitment;\\n        bytes encryptedOutput;\\n    }\\n\\n    constructor(\\n        address _spendVerifier,\\n        address _outputVerifier,\\n        address _hasher\\n    ) MerkleTreeWithHistory(5, _hasher) {\\n        spendVerifier = SpendVerifier(_spendVerifier);\\n        outputVerifier = OutputVerifier(_outputVerifier);\\n        _initialize();\\n    }\\n\\n    function parseProof(\\n        bytes memory data\\n    )\\n        internal\\n        pure\\n        returns (uint[2] memory a, uint[2][2] memory b, uint[2] memory c)\\n    {\\n        (a[0], a[1], b[0][0], b[0][1], b[1][0], b[1][1], c[0], c[1]) = abi\\n            .decode(data, (uint, uint, uint, uint, uint, uint, uint, uint));\\n    }\\n\\n    function spendVerify(\\n        bytes memory _proof,\\n        uint[1] memory _pubSignals\\n    ) public view {\\n        (uint[2] memory a, uint[2][2] memory b, uint[2] memory c) = parseProof(\\n            _proof\\n        );\\n        require(\\n            spendVerifier.verifyProof(a, b, c, _pubSignals),\\n            \\\"invalid proof\\\"\\n        );\\n    }\\n\\n    function outputVerify(\\n        bytes memory _proof,\\n        uint[1] memory _pubSignals\\n    ) public view {\\n        (uint[2] memory a, uint[2][2] memory b, uint[2] memory c) = parseProof(\\n            _proof\\n        );\\n        require(\\n            outputVerifier.verifyProof(a, b, c, _pubSignals),\\n            \\\"invalid proof\\\"\\n        );\\n    }\\n\\n    struct RedDSASignature {\\n        bytes32 s;\\n        bytes32 R;\\n    }\\n\\n    function sigVerify(\\n        uint256 _s,\\n        uint256[2] memory _R,\\n        uint256[2] memory _A,\\n        bytes memory _message\\n    ) public view {\\n        EdOnBN254.Affine memory _Rp = EdOnBN254.Affine(_R[0], _R[1]);\\n        EdOnBN254.Affine memory _Ap = EdOnBN254.Affine(_A[0], _A[1]);\\n        bytes memory data = abi.encode(_Rp.x, _Rp.y, _Ap.x, _Ap.y, _message);\\n\\n        uint256 _c = uint256(keccak256(data)) % EdOnBN254.N;\\n        EdOnBN254.Affine memory _Z = EdOnBN254\\n            .primeSubgroupGenerator()\\n            .neg()\\n            .mul(_s)\\n            .add(_Rp)\\n            .add(_Ap.mul(_c));\\n\\n        require(_Z.x == 0, \\\"signature is not valid\\\");\\n    }\\n\\n    function _transactCheck(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        EdOnBN254.Affine memory _valueBal,\\n        uint256 _root\\n    ) internal {\\n        require(isKnownRoot(bytes32(_root)), \\\"Invalid merkle root\\\");\\n\\n        for (uint i = 0; i < _spendProof.length; i++) {\\n            require(\\n                !isSpent(_spendProof[i].nullifier),\\n                \\\"Input is already spent\\\"\\n            );\\n        }\\n\\n        EdOnBN254.Affine memory total = EdOnBN254.zero();\\n\\n        for (uint i = 0; i < _spendProof.length; i++) {\\n            SpendProof memory spendProof = _spendProof[i];\\n            total = total.add(\\n                EdOnBN254.Affine(\\n                    spendProof.valueCommitment[0],\\n                    spendProof.valueCommitment[1]\\n                )\\n            );\\n        }\\n\\n        for (uint j = 0; j < _outputProofs.length; j++) {\\n            OutputProof memory outputProof = _outputProofs[j];\\n            total = total.add(\\n                EdOnBN254\\n                    .Affine(\\n                        outputProof.valueCommitment[0],\\n                        outputProof.valueCommitment[1]\\n                    )\\n                    .neg()\\n            );\\n        }\\n\\n        require(\\n            total.add(_valueBal.neg()).x == _bpk[0] &&\\n                total.add(_valueBal.neg()).y == _bpk[1],\\n            \\\"Sum of values is incorrect\\\"\\n        );\\n\\n        for (uint i = 0; i < _spendProof.length; i++) {\\n            SpendProof memory spendProof = _spendProof[i];\\n            spendVerify(spendProof.proof, [uint256(spendProof.nullifier)]);\\n        }\\n\\n        for (uint j = 0; j < _outputProofs.length; j++) {\\n            OutputProof memory outputProof = _outputProofs[j];\\n            outputVerify(outputProof.proof, [uint256(outputProof.commitment)]);\\n        }\\n\\n        for (uint i = 0; i < _spendProof.length; i++) {\\n            nullifierHashes[_spendProof[i].nullifier] = true;\\n        }\\n\\n        require(_outputProofs.length == 2, \\\"only can do 2 outputproofs\\\");\\n\\n        _insertCommitments(_outputProofs);\\n        emit NewCommitment(\\n            _outputProofs[0].commitment,\\n            nextIndex - 2,\\n            _outputProofs[0].encryptedOutput\\n        );\\n\\n        emit NewCommitment(\\n            _outputProofs[1].commitment,\\n            nextIndex - 1,\\n            _outputProofs[1].encryptedOutput\\n        );\\n\\n        for (uint256 i = 0; i < _spendProof.length; i++) {\\n            emit NewNullifier(_spendProof[i].nullifier);\\n        }\\n    }\\n\\n    function _insertCommitments(OutputProof[] memory _outputProofs) internal {\\n        // Insert all leaves except the last one using pairs as usual\\n        _insert(\\n            bytes32(_outputProofs[0].commitment),\\n            bytes32(_outputProofs[1].commitment)\\n        );\\n    }\\n\\n    function _deposit(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        uint256 _assetId,\\n        uint256 _depositAmount,\\n        uint256 _root\\n    ) internal {\\n        // this is the same as G * poseidon(asset) * value of asset being deposited\\n        EdOnBN254.Affine memory _valueBal = EdOnBN254\\n            .primeSubgroupGenerator()\\n            .mul(_assetId)\\n            .mul(_depositAmount)\\n            .neg();\\n\\n        _transactCheck(_spendProof, _outputProofs, _bpk, _valueBal, _root);\\n    }\\n\\n    function _withdraw(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        uint256 _assetId,\\n        uint256 _withdrawAmount,\\n        uint256 _root\\n    ) internal {\\n        // this is the same as G * poseidon(asset) * value of asset being deposited\\n        EdOnBN254.Affine memory _valueBal = EdOnBN254\\n            .primeSubgroupGenerator()\\n            .mul(_assetId)\\n            .mul(_withdrawAmount);\\n\\n        _transactCheck(_spendProof, _outputProofs, _bpk, _valueBal, _root);\\n    }\\n\\n    function transact(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        uint256 _root\\n    ) public {\\n        EdOnBN254.Affine memory _valueBal = EdOnBN254.zero();\\n\\n        _transactCheck(_spendProof, _outputProofs, _bpk, _valueBal, _root);\\n    }\\n\\n    function isSpent(uint256 _nullifierHash) public view returns (bool) {\\n        return nullifierHashes[_nullifierHash];\\n    }\\n}\\n\",\"keccak256\":\"0x6fc6b06b479a9799147aacc8c2f346be146b5b46e6963daeb1f83a58ddc60f46\",\"license\":\"UNLICENSED\"},\"contracts/EdOnBN254.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n// Courtesy https://github.com/Tetration-Lab/solidity-ed-on-bn254/blob/main/src/EdOnBN254V.sol\\n\\n// A Twisted Edwards curve on scalar field of BN254. Also known as [Baby-Jubjub](https://github.com/barryWhiteHat/baby_jubjub).\\n// Modified from:\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// https://github.com/arkworks-rs/curves/tree/master/ed_on_bn254\\n//\\n// Curve information:\\n// * Base field: q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n// * Scalar field: r = 2736030358979909402780800718157159386076813972158567259200215660948447373041\\n// * Valuation(q - 1, 2) = 28\\n// * Valuation(r - 1, 2) = 4\\n// * Curve equation: ax^2 + y^2 =1 + dx^2y^2, where\\n//    * a = 168700\\n//    * d = 168696\\nlibrary EdOnBN254 {\\n    uint256 public constant Q =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 public constant E_A = 168700;\\n    uint256 public constant E_D = 168696;\\n    uint256 public constant N =\\n        21888242871839275222246405745257275088614511777268538073601725287587578984328;\\n    struct Affine {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    function primeSubgroupGenerator() public pure returns (Affine memory) {\\n        return\\n            Affine(\\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\\n                5472060717959818805561601436314318772137091100104008585924551046643952123905\\n            );\\n    }\\n\\n    function zero() public pure returns (Affine memory) {\\n        return Affine(0, 1);\\n    }\\n\\n    function add(\\n        Affine memory a1,\\n        Affine memory a2\\n    ) public view returns (Affine memory) {\\n        if (a1.x == 0 && a1.y == 0) {\\n            return a2;\\n        }\\n\\n        if (a2.x == 0 && a2.y == 0) {\\n            return a1;\\n        }\\n\\n        uint256 x1x2 = mulmod(a1.x, a2.x, Q);\\n        uint256 y1y2 = mulmod(a1.y, a2.y, Q);\\n        uint256 dx1x2y1y2 = mulmod(E_D, mulmod(x1x2, y1y2, Q), Q);\\n        uint256 x3Num = addmod(mulmod(a1.x, a2.y, Q), mulmod(a1.y, a2.x, Q), Q);\\n        uint256 y3Num = submod(y1y2, mulmod(E_A, x1x2, Q), Q);\\n\\n        return\\n            Affine(\\n                mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q),\\n                mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q)\\n            );\\n    }\\n\\n    function double(Affine memory a) public view returns (Affine memory) {\\n        return add(a, a);\\n    }\\n\\n    function mul(\\n        Affine memory a,\\n        uint256 s\\n    ) public view returns (Affine memory) {\\n        uint256 remaining = s;\\n        Affine memory p = Affine(a.x, a.y);\\n        Affine memory ret = Affine(0, 0);\\n\\n        while (remaining != 0) {\\n            if ((remaining & 1) != 0) {\\n                ret = add(ret, p);\\n            }\\n\\n            p = double(p);\\n\\n            remaining = remaining / 2;\\n        }\\n\\n        return ret;\\n    }\\n\\n    function neg(Affine memory a) public pure returns (Affine memory) {\\n        if (a.x == 0 && a.y == 0) return a;\\n        return Affine(submod(0, a.x, Q), a.y);\\n    }\\n\\n    function submod(\\n        uint256 _a,\\n        uint256 _b,\\n        uint256 _mod\\n    ) internal pure returns (uint256) {\\n        return addmod(_a, _mod - _b, _mod);\\n    }\\n\\n    function inverse(uint256 _a) internal view returns (uint256) {\\n        return expmod(_a, Q - 2, Q);\\n    }\\n\\n    function expmod(\\n        uint256 _b,\\n        uint256 _e,\\n        uint256 _m\\n    ) internal view returns (uint256 o) {\\n        assembly {\\n            let memPtr := mload(0x40)\\n            mstore(memPtr, 0x20)\\n            mstore(add(memPtr, 0x20), 0x20)\\n            mstore(add(memPtr, 0x40), 0x20)\\n            mstore(add(memPtr, 0x60), _b)\\n            mstore(add(memPtr, 0x80), _e)\\n            mstore(add(memPtr, 0xa0), _m)\\n\\n            let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                o := mload(memPtr)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4a0360b7912cc1daf97fb9cdc483be88956e8bfc605d0a209dcdd362032a744\",\"license\":\"UNLICENSED\"},\"contracts/MerkleTreeWithHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHasher {\\n    function poseidon(\\n        bytes32[2] calldata inputs\\n    ) external pure returns (bytes32);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n    uint256 public constant FIELD_SIZE =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 public constant ZERO_VALUE =\\n        21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n    IHasher public hasher;\\n    uint32 public immutable levels;\\n\\n    // the following variables are made public for easier testing and debugging and\\n    // are not supposed to be accessed in regular code\\n\\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n    // it removes index range check on every interaction\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    mapping(uint256 => bytes32) public roots;\\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\\n    uint32 public currentRootIndex = 0; // todo remove\\n    uint32 public nextIndex = 0;\\n\\n    constructor(\\n        uint32 _levels,\\n        address _hasher //        bytes memory _hasherBytecode\\n    ) {\\n        require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n        require(_levels < 32, \\\"_levels should be less than 32\\\");\\n        levels = _levels;\\n\\n        hasher = IHasher(_hasher);\\n    }\\n\\n    function _initialize() internal {\\n        for (uint32 i = 0; i < levels; i++) {\\n            filledSubtrees[i] = zeros(i);\\n        }\\n\\n        roots[0] = zeros(levels);\\n    }\\n\\n    /**\\n      @dev Hash 2 tree leaves, returns Poseidon(_left, _right)\\n    */\\n    function hashLeftRight(\\n        bytes32 _left,\\n        bytes32 _right\\n    ) public view returns (bytes32) {\\n        require(\\n            uint256(_left) < FIELD_SIZE,\\n            \\\"_left should be inside the field\\\"\\n        );\\n        require(\\n            uint256(_right) < FIELD_SIZE,\\n            \\\"_right should be inside the field\\\"\\n        );\\n        bytes32[2] memory input;\\n        input[0] = _left;\\n        input[1] = _right;\\n        return hasher.poseidon(input);\\n    }\\n\\n    // Modified to insert pairs of leaves for better efficiency\\n    function _insert(\\n        bytes32 _leaf1,\\n        bytes32 _leaf2\\n    ) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextIndex;\\n        require(\\n            _nextIndex != uint32(2) ** levels,\\n            \\\"Merkle tree is full. No more leaves can be added\\\"\\n        );\\n        uint32 currentIndex = _nextIndex / 2;\\n        bytes32 currentLevelHash = hashLeftRight(_leaf1, _leaf2);\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint32 i = 1; i < levels; i++) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeros(i);\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n            currentLevelHash = hashLeftRight(left, right);\\n            currentIndex /= 2;\\n        }\\n\\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n        currentRootIndex = newRootIndex;\\n        roots[newRootIndex] = currentLevelHash;\\n        nextIndex = _nextIndex + 2;\\n        return _nextIndex;\\n    }\\n\\n    /**\\n      @dev Whether the root is present in the root history\\n    */\\n    function isKnownRoot(bytes32 _root) public view returns (bool) {\\n        if (_root == 0) {\\n            return false;\\n        }\\n        uint32 _currentRootIndex = currentRootIndex;\\n        uint32 i = _currentRootIndex;\\n        do {\\n            if (_root == roots[i]) {\\n                return true;\\n            }\\n            if (i == 0) {\\n                i = ROOT_HISTORY_SIZE;\\n            }\\n            i--;\\n        } while (i != _currentRootIndex);\\n        return false;\\n    }\\n\\n    /**\\n      @dev Returns the last root\\n    */\\n    function getLastRoot() public view returns (bytes32) {\\n        return roots[currentRootIndex];\\n    }\\n\\n    /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n    // TODO: this should change to poseidon\\n    function zeros(uint256 i) public pure returns (bytes32) {\\n        if (i == 0)\\n            return\\n                bytes32(\\n                    0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c\\n                );\\n        else if (i == 1)\\n            return\\n                bytes32(\\n                    0x13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8\\n                );\\n        else if (i == 2)\\n            return\\n                bytes32(\\n                    0x217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765\\n                );\\n        else if (i == 3)\\n            return\\n                bytes32(\\n                    0x0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee\\n                );\\n        else if (i == 4)\\n            return\\n                bytes32(\\n                    0x27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587\\n                );\\n        else if (i == 5)\\n            return\\n                bytes32(\\n                    0x194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc\\n                );\\n        else if (i == 6)\\n            return\\n                bytes32(\\n                    0x1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f\\n                );\\n        else if (i == 7)\\n            return\\n                bytes32(\\n                    0x267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219\\n                );\\n        else if (i == 8)\\n            return\\n                bytes32(\\n                    0x1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d\\n                );\\n        else if (i == 9)\\n            return\\n                bytes32(\\n                    0x0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce\\n                );\\n        else if (i == 10)\\n            return\\n                bytes32(\\n                    0x2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7\\n                );\\n        else if (i == 11)\\n            return\\n                bytes32(\\n                    0x280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47\\n                );\\n        else if (i == 12)\\n            return\\n                bytes32(\\n                    0x045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b\\n                );\\n        else if (i == 13)\\n            return\\n                bytes32(\\n                    0x27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366\\n                );\\n        else if (i == 14)\\n            return\\n                bytes32(\\n                    0x1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef\\n                );\\n        else if (i == 15)\\n            return\\n                bytes32(\\n                    0x20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca\\n                );\\n        else if (i == 16)\\n            return\\n                bytes32(\\n                    0x09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec\\n                );\\n        else if (i == 17)\\n            return\\n                bytes32(\\n                    0x0064b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b\\n                );\\n        else if (i == 18)\\n            return\\n                bytes32(\\n                    0x095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f\\n                );\\n        else if (i == 19)\\n            return\\n                bytes32(\\n                    0x11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63\\n                );\\n        else if (i == 20)\\n            return\\n                bytes32(\\n                    0x2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb\\n                );\\n        else if (i == 21)\\n            return\\n                bytes32(\\n                    0x16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279\\n                );\\n        else if (i == 22)\\n            return\\n                bytes32(\\n                    0x21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff\\n                );\\n        else if (i == 23)\\n            return\\n                bytes32(\\n                    0x2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962\\n                );\\n        else if (i == 24)\\n            return\\n                bytes32(\\n                    0x16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10\\n                );\\n        else if (i == 25)\\n            return\\n                bytes32(\\n                    0x2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013\\n                );\\n        else if (i == 26)\\n            return\\n                bytes32(\\n                    0x2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14\\n                );\\n        else if (i == 27)\\n            return\\n                bytes32(\\n                    0x0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0\\n                );\\n        else if (i == 28)\\n            return\\n                bytes32(\\n                    0x202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50\\n                );\\n        else if (i == 29)\\n            return\\n                bytes32(\\n                    0x23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187\\n                );\\n        else if (i == 30)\\n            return\\n                bytes32(\\n                    0x1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0\\n                );\\n        else if (i == 31)\\n            return\\n                bytes32(\\n                    0x1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06\\n                );\\n        else if (i == 32)\\n            return\\n                bytes32(\\n                    0x25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6\\n                );\\n        else revert(\\\"Index out of bounds\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7a43c6dcba4bbd661b488c75c6beb533b4ee11c27051e0b6367b513127b9b568\",\"license\":\"MIT\"},\"contracts/RK.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./CircomExample.sol\\\";\\n\\ncontract RK is CircomExample, CCIPReceiver {\\n    /// Chainlink CCIP Router Address - used to send messages across chains\\n    IRouterClient public immutable router;\\n\\n    // hash of address + chain id to t/f to determine if this address is allowed to send\\n    mapping(bytes32 => bool) allowedRemotes;\\n\\n    // list of allowed remote chain ids (used for receiving messages)\\n    mapping(uint64 => bool) allowedChainIds;\\n\\n    // list of allowed destination chain ids (handy for UX)\\n    mapping(uint64 chainId => bool enabled) private allowlistedChains;\\n\\n    // gas limit for CCIP message (TODO investigate more about this value)\\n    uint256 gasLimit = 800_000;\\n\\n    // error and modifier used when sending to remote chain\\n    error DestinationChainNotAllowlisted(uint64 destinationChainSelector);\\n    modifier onlyAllowlistedDestinationChain(uint64 destinationChainSelector) {\\n        if (!allowlistedChains[destinationChainSelector])\\n            revert DestinationChainNotAllowlisted(destinationChainSelector);\\n        _;\\n    }\\n\\n    // checks to see if the contract sending a message from another network is allowed to send to this contract\\n    modifier onlyAllowlistedSourceChain(\\n        uint64 _sourceChainSelector,\\n        address _sender\\n    ) {\\n        require(\\n            allowedRemotes[\\n                keccak256(abi.encode(_sender, _sourceChainSelector))\\n            ],\\n            \\\"Source Chain not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    address owner;\\n\\n    constructor(\\n        address _spendVerifier,\\n        address _outputVerifier,\\n        address _merkleHasher,\\n        address _router,\\n        address[] memory _allowlistedRemotes,\\n        uint64[] memory _allowlistedChains\\n    )\\n        CircomExample(_spendVerifier, _outputVerifier, _merkleHasher)\\n        CCIPReceiver(_router)\\n    {\\n        router = IRouterClient(_router);\\n\\n        // set all of our allowed remotes on chains\\n        for (uint256 i = 0; i < _allowlistedChains.length; i++) {\\n            allowedRemotes[\\n                keccak256(\\n                    abi.encode(_allowlistedRemotes[i], _allowlistedChains[i])\\n                )\\n            ] = true;\\n        }\\n\\n        owner = msg.sender;\\n    }\\n\\n    function _enforceOwner() internal view {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n    }\\n\\n    function allowlistChain(uint64 _chainId, bool _allowed) external {\\n        _enforceOwner();\\n        allowlistedChains[_chainId] = _allowed;\\n    }\\n\\n    function updateAllowlistDestinationChain(\\n        address _remoteAddress,\\n        uint64 _chainId,\\n        bool _allowed\\n    ) external {\\n        _enforceOwner();\\n        allowedRemotes[\\n            keccak256(abi.encode(_remoteAddress, _chainId))\\n        ] = _allowed;\\n    }\\n\\n    function updateGasLimit(uint256 _gasLimit) external {\\n        _enforceOwner();\\n        gasLimit = _gasLimit;\\n    }\\n\\n    // logic called when this contract receives a message from another chain through the CCIP router\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    )\\n        internal\\n        override\\n        onlyAllowlistedSourceChain(\\n            any2EvmMessage.sourceChainSelector,\\n            abi.decode(any2EvmMessage.sender, (address))\\n        )\\n    {\\n        // message received\\n    }\\n\\n    struct SupportedAsset {\\n        uint256 assetId;\\n        address assetAddress;\\n        uint8 decimals;\\n    }\\n\\n    mapping(uint256 => SupportedAsset) public assetToAddress;\\n\\n    function addSupportedAsset(\\n        uint256 _assetId,\\n        address _assetAddress,\\n        uint8 _decimals\\n    ) external {\\n        _enforceOwner();\\n        assetToAddress[_assetId] = SupportedAsset(\\n            _assetId,\\n            _assetAddress,\\n            _decimals\\n        );\\n    }\\n\\n    function deposit(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        uint256 _assetId,\\n        uint256 _depositAmount,\\n        uint256 _root\\n    ) external {\\n        // transfer the users asset to this address\\n        SupportedAsset memory _asset = assetToAddress[_assetId];\\n        require(_asset.assetAddress != address(0), \\\"Asset not supported\\\");\\n\\n        // transfer the asset to this contract\\n        IERC20(_asset.assetAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _depositAmount\\n        );\\n\\n        // call our deposit function (the proofs are verified in this function)\\n        _deposit(\\n            _spendProof,\\n            _outputProofs,\\n            _bpk,\\n            _assetId,\\n            _depositAmount,\\n            _root\\n        );\\n    }\\n\\n    function withdraw(\\n        SpendProof[] memory _spendProof,\\n        OutputProof[] memory _outputProofs,\\n        uint[2] memory _bpk,\\n        uint256 _assetId,\\n        uint256 _withdrawAmount,\\n        uint256 _root\\n    ) external {\\n        SupportedAsset memory _asset = assetToAddress[_assetId];\\n        require(_asset.assetAddress != address(0), \\\"Asset not supported\\\");\\n\\n        _withdraw(\\n            _spendProof,\\n            _outputProofs,\\n            _bpk,\\n            _assetId,\\n            _withdrawAmount,\\n            _root\\n        );\\n\\n        // transfer the asset to this contract\\n        IERC20(_asset.assetAddress).transfer(msg.sender, _withdrawAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x594e957c3048eb5da6a7bd9800ec23e7ce2fc731faebb759b17472a51e012813\",\"license\":\"UNLICENSED\"},\"contracts/verifiers/MultiplierVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// MultiplierVerifier\\n\\ncontract MultiplierVerifier {\\n    // Scalar field size\\n    uint256 constant r =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax =\\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay =\\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 =\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 =\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 =\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 =\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    uint256 constant IC0x =\\n        6819801395408938350212900248749732364821477541620635511814266536599629892365;\\n    uint256 constant IC0y =\\n        9092252330033992554755034971584864587974280972948086568597554018278609861372;\\n\\n    uint256 constant IC1x =\\n        17882351432929302592725330552407222299541667716607588771282887857165175611387;\\n    uint256 constant IC1y =\\n        18907419617206324833977586007131055763810739835484972981819026406579664278293;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[1] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(\\n                    add(_pPairing, 32),\\n                    mod(sub(q, calldataload(add(pA, 32))), q)\\n                )\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(\\n                    sub(gas(), 2000),\\n                    8,\\n                    _pPairing,\\n                    768,\\n                    _pPairing,\\n                    0x20\\n                )\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7e481b19874acfe4c8a2a4c371513866591816caf645d2159533c539b3d8d9f4\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/OutputVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract OutputVerifier {\\n    // Scalar field size\\n    uint256 constant r =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax =\\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay =\\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 =\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 =\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 =\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 =\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    uint256 constant IC0x =\\n        1683237225823114434475890574383752547954072352828691693424657766749909930157;\\n    uint256 constant IC0y =\\n        10110230595513512447464523409088479123880299917968738755747969449083376759640;\\n\\n    uint256 constant IC1x =\\n        4056418060501632235230320772714212416570094334995124498323336691459959999359;\\n    uint256 constant IC1y =\\n        21643569436575009513875246258150055494694779099518902792361106450376709368816;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[1] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(\\n                    add(_pPairing, 32),\\n                    mod(sub(q, calldataload(add(pA, 32))), q)\\n                )\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(\\n                    sub(gas(), 2000),\\n                    8,\\n                    _pPairing,\\n                    768,\\n                    _pPairing,\\n                    0x20\\n                )\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf43402a1cd129fa57ba58e8f7ab46da97a578cf2a8fbcab9777b3d735c467ab\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/SpendVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract SpendVerifier {\\n    // Scalar field size\\n    uint256 constant r =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax =\\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay =\\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 =\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 =\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 =\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 =\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    uint256 constant IC0x =\\n        21012000739560819142560423255928019433747389049417804685005853346299490572200;\\n    uint256 constant IC0y =\\n        3110505566226718760385739709087438592945845328831699463083576662218091229871;\\n\\n    uint256 constant IC1x =\\n        19327189360385847724919098495693001434248018658209772205800586599839951879190;\\n    uint256 constant IC1y =\\n        14864085053986614968409113362162378348043653796760683469901851492790138603530;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[1] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(\\n                    add(_pPairing, 32),\\n                    mod(sub(q, calldataload(add(pA, 32))), q)\\n                )\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(\\n                    sub(gas(), 2000),\\n                    8,\\n                    _pPairing,\\n                    768,\\n                    _pPairing,\\n                    0x20\\n                )\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebca42f9413ab5a3af738d4bf29d382ee66147c1753a340811c883ec27a1a41f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e0604052600380546001600160401b0319169055620c350060095534801561002757600080fd5b5060405161460638038061460683398101604081905261004691610a11565b8286868660058161005b565b60405180910390fd5b60208263ffffffff16106100b15760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401610052565b63ffffffff91909116608052600080546001600160a01b03199081166001600160a01b039384161790915560038054600160401b600160e01b031916680100000000000000008785160217905560048054909116918416919091179055610116610225565b5050506001600160a01b038116610143576040516335fdcccd60e21b815260006004820152602401610052565b6001600160a01b0390811660a052831660c05260005b81518110156102065760016006600085848151811061017a5761017a610b15565b602002602001015185858151811061019457610194610b15565b60200260200101516040516020016101ca9291906001600160a01b039290921682526001600160401b0316602082015260400190565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff1916911515919091179055600101610159565b5050600a80546001600160a01b0319163317905550610b2b9350505050565b60005b60805163ffffffff168163ffffffff16101561026f5761024d63ffffffff82166102af565b63ffffffff821660009081526001602081905260409091209190915501610228565b506080516102829063ffffffff166102af565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b55565b6000816000036102e057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361030f57507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b8160020361033e57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b8160030361036d57507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b8160040361039c57507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b816005036103cb57507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b816006036103fa57507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b8160070361042957507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b8160080361045857507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b8160090361048757507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a036104b657507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b036104e557507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c0361051457507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d0361054357507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e0361057257507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f036105a157507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b816010036105d057507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b816011036105fe57507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b8160120361062d57507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b8160130361065c57507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b8160140361068b57507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b816015036106ba57507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b816016036106e957507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b8160170361071857507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b8160180361074757507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b8160190361077657507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a036107a557507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b036107d457507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c0361080357507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d0361083257507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e0361086157507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f0361089057507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b816020036108bf57507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401610052565b919050565b80516001600160a01b038116811461090757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561096157610961610923565b604052919050565b60006001600160401b0382111561098257610982610923565b5060051b60200190565b600082601f83011261099d57600080fd5b815160206109b26109ad83610969565b610939565b8083825260208201915060208460051b8701019350868411156109d457600080fd5b602086015b84811015610a065780516001600160401b03811681146109f95760008081fd5b83529183019183016109d9565b509695505050505050565b60008060008060008060c08789031215610a2a57600080fd5b610a338761090c565b95506020610a4281890161090c565b9550610a506040890161090c565b9450610a5e6060890161090c565b60808901519094506001600160401b0380821115610a7b57600080fd5b818a0191508a601f830112610a8f57600080fd5b8151610a9d6109ad82610969565b81815260059190911b8301840190848101908d831115610abc57600080fd5b938501935b82851015610ae157610ad28561090c565b82529385019390850190610ac1565b60a08d01519097509450505080831115610afa57600080fd5b5050610b0889828a0161098c565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c051613a97610b6f60003960006105c50152600081816104910152610cef0152600081816103ad015281816129bb0152612a860152613a976000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806396cbc43a1161010f578063d710442a116100a2578063f178e47c11610071578063f178e47c1461058d578063f687d12a146105ad578063f887ea40146105c0578063fc7e9c6f146105e757600080fd5b8063d710442a14610520578063e829558814610533578063ec73295914610546578063ed33639f1461056d57600080fd5b8063c2b40ae4116100de578063c2b40ae4146104d2578063c4f7cba1146104f2578063cd87a3b414610505578063cfaa5b4f1461050d57600080fd5b806396cbc43a14610450578063a575c3a11461047c578063b0f479a11461048f578063ba70f757146104b557600080fd5b8063414a37ba116101875780635eae602a116101565780635eae602a146104075780636d9833e31461041a57806385572ffb1461042d57806390eeb02b1461044057600080fd5b8063414a37ba146102f45780634e7eab6f1461031b5780634ecf518b146103a85780635a129efe146103e457600080fd5b8063338c3bec116101c3578063338c3bec1461029a57806333d084bf146102ad57806338bf282e146102c05780633c025355146102e157600080fd5b806301ffc9a7146101f55780631633e3f51461021d5780631f79a1e9146102625780632ccc493514610285575b600080fd5b610208610203366004612c4f565b6105ff565b60405190151581526020015b60405180910390f35b60045461023d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b610208610270366004612c98565b60056020526000908152604090205460ff1681565b610298610293366004612cf9565b610698565b005b6102986102a8366004612ea4565b61073a565b6102986102bb366004612ea4565b61084f565b6102d36102ce366004612f4e565b6108c1565b604051908152602001610214565b6102986102ef3660046131ca565b610a78565b6102d37f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b610375610329366004612c98565b600b602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1683565b6040805193845273ffffffffffffffffffffffffffffffffffffffff909216602084015260ff1690820152606001610214565b6103cf7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610214565b6102086103f2366004612c98565b60009081526005602052604090205460ff1690565b610298610415366004613247565b610af5565b610208610428366004612c98565b610c59565b61029861043b3660046132d8565b610cd7565b6003546103cf9063ffffffff1681565b60035461023d9068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b61029861048a366004613313565b610d5c565b7f000000000000000000000000000000000000000000000000000000000000000061023d565b60035463ffffffff166000908152600260205260409020546102d3565b6102d36104e0366004612c98565b60026020526000908152604090205481565b61029861050036600461337d565b6111e4565b6103cf606481565b61029861051b366004613247565b611236565b61029861052e3660046133b4565b6113a0565b6102d3610541366004612c98565b611448565b6102d37f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b60005461023d9073ffffffffffffffffffffffffffffffffffffffff1681565b6102d361059b366004612c98565b60016020526000908152604090205481565b6102986105bb366004612c98565b611aa5565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b6003546103cf90640100000000900463ffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f85572ffb00000000000000000000000000000000000000000000000000000000148061069257507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6106a0611ab2565b806006600085856040516020016106e392919073ffffffffffffffffffffffffffffffffffffffff92909216825267ffffffffffffffff16602082015260400190565b60408051808303601f1901815291815281516020928301208352908201929092520160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055505050565b600080600061074885611b41565b6003546040517f43753b4d000000000000000000000000000000000000000000000000000000008152939650919450925068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16906343753b4d906107b6908690869086908a9060040161341a565b602060405180830381865afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f791906134c1565b6108485760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b600080600061085d85611b41565b600480546040517f43753b4d00000000000000000000000000000000000000000000000000000000815294975092955090935073ffffffffffffffffffffffffffffffffffffffff909116916343753b4d916107b6918791879187918b910161341a565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106109325760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015260640161083f565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182106109c75760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161083f565b6109cf612c04565b838152602081018390526000546040517f299e566000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063299e566090610a2f90849060040161350d565b602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a70919061353e565b949350505050565b600073aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f363bc1b392d6040518163ffffffff1660e01b81526004016040805180830381865af4158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190613557565b90506108488585858486611ba0565b6000838152600b602090815260409182902082516060810184528154815260019091015473ffffffffffffffffffffffffffffffffffffffff811692820183905274010000000000000000000000000000000000000000900460ff1692810192909252610ba45760405162461bcd60e51b815260206004820152601360248201527f4173736574206e6f7420737570706f7274656400000000000000000000000000604482015260640161083f565b610bb28787878787876124d6565b60208101516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f91906134c1565b5050505050505050565b6000818103610c6a57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610c9b575060019392505050565b8063ffffffff16600003610cad575060645b80610cb7816135b8565b9150508163ffffffff168163ffffffff1603610c75575060009392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d48576040517fd7f7333400000000000000000000000000000000000000000000000000000000815233600482015260240161083f565b610d59610d548261367e565b612690565b50565b6000604051806040016040528085600060028110610d7c57610d7c6134de565b6020020151815260200185600160028110610d9957610d996134de565b602002015181525090506000604051806040016040528085600060028110610dc357610dc36134de565b6020020151815260200185600160028110610de057610de06134de565b60209081029190910151909152835184820151835184840151604051959650600095610e0e958a9101613771565b604051602081830303815290604052905060007f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c9093788828051906020012060001c610e5791906137d6565b9050600073aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af4158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190613557565b6040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f391635e20a7f191610f1691906004016137ea565b6040805180830381865af4158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190613557565b6040517f2afb4927000000000000000000000000000000000000000000000000000000008152815160048201526020909101516024820152604481018a905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390632afb4927906064016040805180830381865af4158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff49190613557565b6040517f9f422d9900000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f391639f422d999161104591908990600401613801565b6040805180830381865af4158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190613557565b6040517f2afb492700000000000000000000000000000000000000000000000000000000815285516004820152602086015160248201526044810184905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f391639f422d99918390632afb4927906064016040805180830381865af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190613557565b6040518363ffffffff1660e01b8152600401611147929190613801565b6040805180830381865af4158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190613557565b8051909150156111d95760405162461bcd60e51b815260206004820152601660248201527f7369676e6174757265206973206e6f742076616c696400000000000000000000604482015260640161083f565b505050505050505050565b6111ec611ab2565b67ffffffffffffffff91909116600090815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000838152600b602090815260409182902082516060810184528154815260019091015473ffffffffffffffffffffffffffffffffffffffff811692820183905274010000000000000000000000000000000000000000900460ff16928101929092526112e55760405162461bcd60e51b815260206004820152601360248201527f4173736574206e6f7420737570706f7274656400000000000000000000000000604482015260640161083f565b60208101516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906134c1565b50611397878787878787612759565b50505050505050565b6113a8611ab2565b6040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff938416602080830191825260ff9485168385019081526000978852600b9091529290952090518155935160019094018054915190921674010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169390921692909217179055565b60008160000361147957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036114a857507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b816002036114d757507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b8160030361150657507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b8160040361153557507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b8160050361156457507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b8160060361159357507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b816007036115c257507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b816008036115f157507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b8160090361162057507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a0361164f57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b0361167e57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c036116ad57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d036116dc57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e0361170b57507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f0361173a57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b8160100361176957507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b8160110361179757507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b816012036117c657507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b816013036117f557507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b8160140361182457507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b8160150361185357507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b8160160361188257507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b816017036118b157507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b816018036118e057507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b8160190361190f57507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a0361193e57507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b0361196d57507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c0361199c57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d036119cb57507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e036119fa57507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03611a2957507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003611a5857507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e647300000000000000000000000000604482015260640161083f565b919050565b611aad611ab2565b600955565b600a5473ffffffffffffffffffffffffffffffffffffffff163314611b3f5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e00000000000000000000000000000000000000000000000000000000000000606482015260840161083f565b565b611b49612c04565b611b51612c22565b611b59612c04565b83806020019051810190611b6d9190613827565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b611ba981610c59565b611bf55760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206d65726b6c6520726f6f7400000000000000000000000000604482015260640161083f565b60005b8551811015611c8c57611c37868281518110611c1657611c166134de565b60200260200101516020015160009081526005602052604090205460ff1690565b15611c845760405162461bcd60e51b815260206004820152601660248201527f496e70757420697320616c7265616479207370656e7400000000000000000000604482015260640161083f565b600101611bf8565b50600073aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f363bc1b392d6040518163ffffffff1660e01b81526004016040805180830381865af4158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190613557565b905060005b8651811015611df7576000878281518110611d1d57611d1d6134de565b602002602001015190508273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3639f422d99909160405180604001604052808560400151600060028110611d6657611d666134de565b602002015181526020018560400151600160028110611d8757611d876134de565b60200201518152506040518363ffffffff1660e01b8152600401611dac929190613801565b6040805180830381865af4158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190613557565b925050600101611d00565b5060005b8551811015611f80576000868281518110611e1857611e186134de565b602002602001015190508273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3639f422d99909160405180604001604052808560400151600060028110611e6157611e616134de565b602002015181526020018560400151600160028110611e8257611e826134de565b602002015190526040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f391635e20a7f191611ed891906004016137ea565b6040805180830381865af4158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190613557565b6040518363ffffffff1660e01b8152600401611f35929190613801565b6040805180830381865af4158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f759190613557565b925050600101611dfb565b5083516040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390639f422d999084908390635e20a7f190611fdd908a906004016137ea565b6040805180830381865af4158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d9190613557565b6040518363ffffffff1660e01b815260040161203a929190613801565b6040805180830381865af4158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190613557565b51148015612185575060208401516040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390639f422d999084908390635e20a7f1906120e2908a906004016137ea565b6040805180830381865af41580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190613557565b6040518363ffffffff1660e01b815260040161213f929190613801565b6040805180830381865af415801561215b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217f9190613557565b60200151145b6121d15760405162461bcd60e51b815260206004820152601a60248201527f53756d206f662076616c75657320697320696e636f7272656374000000000000604482015260640161083f565b60005b86518110156122245760008782815181106121f1576121f16134de565b6020026020010151905061221b81600001516040518060200160405280846020015181525061073a565b506001016121d4565b5060005b8551811015612278576000868281518110612245576122456134de565b6020026020010151905061226f81600001516040518060200160405280846020015181525061084f565b50600101612228565b5060005b86518110156122ef5760016005600089848151811061229d5761229d6134de565b602090810291909101810151810151825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560010161227c565b5084516002146123415760405162461bcd60e51b815260206004820152601a60248201527f6f6e6c792063616e20646f2032206f757470757470726f6f6673000000000000604482015260640161083f565b61234a85612952565b60035461236790600290640100000000900463ffffffff16613884565b63ffffffff1685600081518110612380576123806134de565b6020026020010151602001517fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf03876000815181106123c0576123c06134de565b6020026020010151606001516040516123d991906138a8565b60405180910390a36003546123fe90600190640100000000900463ffffffff16613884565b63ffffffff1685600181518110612417576124176134de565b6020026020010151602001517fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf0387600181518110612457576124576134de565b60200260200101516060015160405161247091906138a8565b60405180910390a360005b865181101561139757868181518110612496576124966134de565b6020026020010151602001517f9218fa47e982bf1ded9b6823b77dbac4a5db62fc73f8efc325c7de424a41180260405160405180910390a260010161247b565b600073aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af4158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810185905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390632afb4927906064016040805180830381865af41580156125be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e29190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810184905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390632afb4927906064015b6040805180830381865af415801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190613557565b90506113978787878486611ba0565b806020015181604001518060200190518101906126ad91906138bb565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208083019190915267ffffffffffffffff8516828401528251808303840181526060909201835281519181019190912060009081526006909152205460ff166127545760405162461bcd60e51b815260206004820152601860248201527f536f7572636520436861696e206e6f7420616c6c6f7765640000000000000000604482015260640161083f565b505050565b600073aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af41580156127a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c79190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810185905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390632afb4927906064016040805180830381865af4158015612841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128659190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810184905273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f390632afb4927906064016040805180830381865af41580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613557565b6040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273aaCd292B475c6Cd2543DaC465516Ab5d7fCd27f391635e20a7f19161264191906004016137ea565b61299e81600081518110612968576129686134de565b60200260200101516020015160001b8260018151811061298a5761298a6134de565b60200260200101516020015160001b6129a2565b5050565b600354600090640100000000900463ffffffff166129e17f000000000000000000000000000000000000000000000000000000000000000060026139e9565b63ffffffff168163ffffffff1603612a615760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201527f7665732063616e20626520616464656400000000000000000000000000000000606482015260840161083f565b6000612a6e6002836139fe565b90506000612a7c86866108c1565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015612b3e57612ac3600286613a21565b63ffffffff16600003612b0157839250612ae28163ffffffff16611448565b63ffffffff821660009081526001602052604090208590559150612b1d565b63ffffffff811660009081526001602052604090205492508391505b612b2783836108c1565b9350612b346002866139fe565b9450600101612a84565b50600354600090606490612b599063ffffffff166001613a44565b612b639190613a21565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff83169081179091556000908152600260208190526040909120869055909150612bb8908790613a44565b6003805463ffffffff92909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b612c39612c04565b815260200190600190039081612c315790505090565b600060208284031215612c6157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612c9157600080fd5b9392505050565b600060208284031215612caa57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d5957600080fd5b803567ffffffffffffffff81168114611aa057600080fd5b8015158114610d5957600080fd5b600080600060608486031215612d0e57600080fd5b8335612d1981612cb1565b9250612d2760208501612cd3565b91506040840135612d3781612ceb565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612d9457612d94612d42565b60405290565b6040516080810167ffffffffffffffff81118282101715612d9457612d94612d42565b6040805190810167ffffffffffffffff81118282101715612d9457612d94612d42565b60405160a0810167ffffffffffffffff81118282101715612d9457612d94612d42565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e2c57612e2c612d42565b604052919050565b600082601f830112612e4557600080fd5b813567ffffffffffffffff811115612e5f57612e5f612d42565b612e726020601f19601f84011601612e03565b818152846020838601011115612e8757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612eb757600080fd5b823567ffffffffffffffff80821115612ecf57600080fd5b612edb86838701612e34565b93506020915085603f860112612ef057600080fd5b604051602081018181108382111715612f0b57612f0b612d42565b80604052508091506040860187811115612f2457600080fd5b602087015b81811015612f405780358452928401928401612f29565b509497909650945050505050565b60008060408385031215612f6157600080fd5b50508035926020909101359150565b600067ffffffffffffffff821115612f8a57612f8a612d42565b5060051b60200190565b600082601f830112612fa557600080fd5b612fad612dbd565b806040840185811115612fbf57600080fd5b845b81811015612fd9578035845260209384019301612fc1565b509095945050505050565b600082601f830112612ff557600080fd5b8135602061300a61300583612f70565b612e03565b82815260059290921b8401810191818101908684111561302957600080fd5b8286015b848110156130c057803567ffffffffffffffff8082111561304e5760008081fd5b908801906080828b03601f190112156130675760008081fd5b61306f612d71565b86830135828111156130815760008081fd5b61308f8c8983870101612e34565b8252506040915081830135878201526130ab8b60608501612f94565b9181019190915284525091830191830161302d565b509695505050505050565b600082601f8301126130dc57600080fd5b813560206130ec61300583612f70565b82815260059290921b8401810191818101908684111561310b57600080fd5b8286015b848110156130c057803567ffffffffffffffff808211156131305760008081fd5b818901915060a080601f19848d0301121561314b5760008081fd5b613153612d9a565b87840135838111156131655760008081fd5b6131738d8a83880101612e34565b82525060408085013589830152606061318e8e828801612f94565b838301529285013592848411156131a757600091508182fd5b6131b58e8b86890101612e34565b9083015250865250505091830191830161310f565b60008060008060a085870312156131e057600080fd5b843567ffffffffffffffff808211156131f857600080fd5b61320488838901612fe4565b9550602087013591508082111561321a57600080fd5b50613227878288016130cb565b9350506132378660408701612f94565b9396929550929360800135925050565b60008060008060008060e0878903121561326057600080fd5b863567ffffffffffffffff8082111561327857600080fd5b6132848a838b01612fe4565b9750602089013591508082111561329a57600080fd5b506132a789828a016130cb565b9550506132b78860408901612f94565b93506080870135925060a0870135915060c087013590509295509295509295565b6000602082840312156132ea57600080fd5b813567ffffffffffffffff81111561330157600080fd5b820160a08185031215612c9157600080fd5b60008060008060c0858703121561332957600080fd5b8435935061333a8660208701612f94565b92506133498660608701612f94565b915060a085013567ffffffffffffffff81111561336557600080fd5b61337187828801612e34565b91505092959194509250565b6000806040838503121561339057600080fd5b61339983612cd3565b915060208301356133a981612ceb565b809150509250929050565b6000806000606084860312156133c957600080fd5b8335925060208401356133db81612cb1565b9150604084013560ff81168114612d3757600080fd5b8060005b60028110156134145781518452602093840193909101906001016133f5565b50505050565b610120810161342982876133f1565b60408083018660005b6002808210613441575061347c565b82518460005b83811015613465578251825260209283019290910190600101613447565b505050928401925060209190910190600101613432565b5050505061348d60c08301856133f1565b61010082018360005b60018110156134b5578151835260209283019290910190600101613496565b50505095945050505050565b6000602082840312156134d357600080fd5b8151612c9181612ceb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408101818360005b6002811015613535578151835260209283019290910190600101613516565b50505092915050565b60006020828403121561355057600080fd5b5051919050565b60006040828403121561356957600080fd5b613571612dbd565b82518152602083015160208201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff8216806135ce576135ce613589565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082601f83011261360757600080fd5b8135602061361761300583612f70565b82815260069290921b8401810191818101908684111561363657600080fd5b8286015b848110156130c057604081890312156136535760008081fd5b61365b612dbd565b813561366681612cb1565b8152818501358582015283529183019160400161363a565b600060a0823603121561369057600080fd5b613698612de0565b823581526136a860208401612cd3565b6020820152604083013567ffffffffffffffff808211156136c857600080fd5b6136d436838701612e34565b604084015260608501359150808211156136ed57600080fd5b6136f936838701612e34565b6060840152608085013591508082111561371257600080fd5b5061371f368286016135f6565b60808301525092915050565b6000815180845260005b8181101561375157602081850181015186830182015201613735565b506000602082860101526020601f19601f83011685010191505092915050565b85815284602082015283604082015282606082015260a06080820152600061379c60a083018461372b565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826137e5576137e56137a7565b500690565b815181526020808301519082015260408101610692565b825181526020808401518183015282516040830152820151606082015260808101612c91565b600080600080600080600080610100898b03121561384457600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b63ffffffff8281168282160390808211156138a1576138a1613589565b5092915050565b602081526000612c91602083018461372b565b6000602082840312156138cd57600080fd5b8151612c9181612cb1565b600181815b80851115613915578163ffffffff048211156138fb576138fb613589565b8085161561390857918102915b93841c93908002906138dd565b509250929050565b60008261392c57506001610692565b8161393957506000610692565b816001811461394f57600281146139595761398a565b6001915050610692565b60ff84111561396a5761396a613589565b6001841b915063ffffffff82111561398457613984613589565b50610692565b5060208310610133831016604e8410600b84101617156139c1575081810a63ffffffff8111156139bc576139bc613589565b610692565b6139cb83836138d8565b8063ffffffff048211156139e1576139e1613589565b029392505050565b600063ffffffff610a7081851682851661391d565b600063ffffffff80841680613a1557613a156137a7565b92169190910492915050565b600063ffffffff80841680613a3857613a386137a7565b92169190910692915050565b63ffffffff8181168382160190808211156138a1576138a161358956fea26469706673582212202874f5f12b3ddbcd711397ce649ced672f2960858d43a13b36b7f91787fb1b4d64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806396cbc43a1161010f578063d710442a116100a2578063f178e47c11610071578063f178e47c1461058d578063f687d12a146105ad578063f887ea40146105c0578063fc7e9c6f146105e757600080fd5b8063d710442a14610520578063e829558814610533578063ec73295914610546578063ed33639f1461056d57600080fd5b8063c2b40ae4116100de578063c2b40ae4146104d2578063c4f7cba1146104f2578063cd87a3b414610505578063cfaa5b4f1461050d57600080fd5b806396cbc43a14610450578063a575c3a11461047c578063b0f479a11461048f578063ba70f757146104b557600080fd5b8063414a37ba116101875780635eae602a116101565780635eae602a146104075780636d9833e31461041a57806385572ffb1461042d57806390eeb02b1461044057600080fd5b8063414a37ba146102f45780634e7eab6f1461031b5780634ecf518b146103a85780635a129efe146103e457600080fd5b8063338c3bec116101c3578063338c3bec1461029a57806333d084bf146102ad57806338bf282e146102c05780633c025355146102e157600080fd5b806301ffc9a7146101f55780631633e3f51461021d5780631f79a1e9146102625780632ccc493514610285575b600080fd5b610208610203366004612c4f565b6105ff565b60405190151581526020015b60405180910390f35b60045461023d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b610208610270366004612c98565b60056020526000908152604090205460ff1681565b610298610293366004612cf9565b610698565b005b6102986102a8366004612ea4565b61073a565b6102986102bb366004612ea4565b61084f565b6102d36102ce366004612f4e565b6108c1565b604051908152602001610214565b6102986102ef3660046131ca565b610a78565b6102d37f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b610375610329366004612c98565b600b602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1683565b6040805193845273ffffffffffffffffffffffffffffffffffffffff909216602084015260ff1690820152606001610214565b6103cf7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610214565b6102086103f2366004612c98565b60009081526005602052604090205460ff1690565b610298610415366004613247565b610af5565b610208610428366004612c98565b610c59565b61029861043b3660046132d8565b610cd7565b6003546103cf9063ffffffff1681565b60035461023d9068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b61029861048a366004613313565b610d5c565b7f000000000000000000000000000000000000000000000000000000000000000061023d565b60035463ffffffff166000908152600260205260409020546102d3565b6102d36104e0366004612c98565b60026020526000908152604090205481565b61029861050036600461337d565b6111e4565b6103cf606481565b61029861051b366004613247565b611236565b61029861052e3660046133b4565b6113a0565b6102d3610541366004612c98565b611448565b6102d37f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b60005461023d9073ffffffffffffffffffffffffffffffffffffffff1681565b6102d361059b366004612c98565b60016020526000908152604090205481565b6102986105bb366004612c98565b611aa5565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b6003546103cf90640100000000900463ffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f85572ffb00000000000000000000000000000000000000000000000000000000148061069257507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6106a0611ab2565b806006600085856040516020016106e392919073ffffffffffffffffffffffffffffffffffffffff92909216825267ffffffffffffffff16602082015260400190565b60408051808303601f1901815291815281516020928301208352908201929092520160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055505050565b600080600061074885611b41565b6003546040517f43753b4d000000000000000000000000000000000000000000000000000000008152939650919450925068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16906343753b4d906107b6908690869086908a9060040161341a565b602060405180830381865afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f791906134c1565b6108485760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b600080600061085d85611b41565b600480546040517f43753b4d00000000000000000000000000000000000000000000000000000000815294975092955090935073ffffffffffffffffffffffffffffffffffffffff909116916343753b4d916107b6918791879187918b910161341a565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106109325760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015260640161083f565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182106109c75760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161083f565b6109cf612c04565b838152602081018390526000546040517f299e566000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063299e566090610a2f90849060040161350d565b602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a70919061353e565b949350505050565b600073__$028df8f3248521475cae26bff5f27a8183$__63bc1b392d6040518163ffffffff1660e01b81526004016040805180830381865af4158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190613557565b90506108488585858486611ba0565b6000838152600b602090815260409182902082516060810184528154815260019091015473ffffffffffffffffffffffffffffffffffffffff811692820183905274010000000000000000000000000000000000000000900460ff1692810192909252610ba45760405162461bcd60e51b815260206004820152601360248201527f4173736574206e6f7420737570706f7274656400000000000000000000000000604482015260640161083f565b610bb28787878787876124d6565b60208101516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f91906134c1565b5050505050505050565b6000818103610c6a57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610c9b575060019392505050565b8063ffffffff16600003610cad575060645b80610cb7816135b8565b9150508163ffffffff168163ffffffff1603610c75575060009392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d48576040517fd7f7333400000000000000000000000000000000000000000000000000000000815233600482015260240161083f565b610d59610d548261367e565b612690565b50565b6000604051806040016040528085600060028110610d7c57610d7c6134de565b6020020151815260200185600160028110610d9957610d996134de565b602002015181525090506000604051806040016040528085600060028110610dc357610dc36134de565b6020020151815260200185600160028110610de057610de06134de565b60209081029190910151909152835184820151835184840151604051959650600095610e0e958a9101613771565b604051602081830303815290604052905060007f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c9093788828051906020012060001c610e5791906137d6565b9050600073__$028df8f3248521475cae26bff5f27a8183$__635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af4158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190613557565b6040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__91635e20a7f191610f1691906004016137ea565b6040805180830381865af4158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190613557565b6040517f2afb4927000000000000000000000000000000000000000000000000000000008152815160048201526020909101516024820152604481018a905273__$028df8f3248521475cae26bff5f27a8183$__90632afb4927906064016040805180830381865af4158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff49190613557565b6040517f9f422d9900000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__91639f422d999161104591908990600401613801565b6040805180830381865af4158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190613557565b6040517f2afb492700000000000000000000000000000000000000000000000000000000815285516004820152602086015160248201526044810184905273__$028df8f3248521475cae26bff5f27a8183$__91639f422d99918390632afb4927906064016040805180830381865af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190613557565b6040518363ffffffff1660e01b8152600401611147929190613801565b6040805180830381865af4158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190613557565b8051909150156111d95760405162461bcd60e51b815260206004820152601660248201527f7369676e6174757265206973206e6f742076616c696400000000000000000000604482015260640161083f565b505050505050505050565b6111ec611ab2565b67ffffffffffffffff91909116600090815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000838152600b602090815260409182902082516060810184528154815260019091015473ffffffffffffffffffffffffffffffffffffffff811692820183905274010000000000000000000000000000000000000000900460ff16928101929092526112e55760405162461bcd60e51b815260206004820152601360248201527f4173736574206e6f7420737570706f7274656400000000000000000000000000604482015260640161083f565b60208101516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906134c1565b50611397878787878787612759565b50505050505050565b6113a8611ab2565b6040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff938416602080830191825260ff9485168385019081526000978852600b9091529290952090518155935160019094018054915190921674010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169390921692909217179055565b60008160000361147957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036114a857507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b816002036114d757507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b8160030361150657507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b8160040361153557507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b8160050361156457507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b8160060361159357507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b816007036115c257507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b816008036115f157507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b8160090361162057507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a0361164f57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b0361167e57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c036116ad57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d036116dc57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e0361170b57507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f0361173a57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b8160100361176957507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b8160110361179757507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b816012036117c657507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b816013036117f557507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b8160140361182457507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b8160150361185357507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b8160160361188257507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b816017036118b157507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b816018036118e057507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b8160190361190f57507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a0361193e57507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b0361196d57507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c0361199c57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d036119cb57507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e036119fa57507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03611a2957507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003611a5857507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e647300000000000000000000000000604482015260640161083f565b919050565b611aad611ab2565b600955565b600a5473ffffffffffffffffffffffffffffffffffffffff163314611b3f5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e00000000000000000000000000000000000000000000000000000000000000606482015260840161083f565b565b611b49612c04565b611b51612c22565b611b59612c04565b83806020019051810190611b6d9190613827565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b611ba981610c59565b611bf55760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206d65726b6c6520726f6f7400000000000000000000000000604482015260640161083f565b60005b8551811015611c8c57611c37868281518110611c1657611c166134de565b60200260200101516020015160009081526005602052604090205460ff1690565b15611c845760405162461bcd60e51b815260206004820152601660248201527f496e70757420697320616c7265616479207370656e7400000000000000000000604482015260640161083f565b600101611bf8565b50600073__$028df8f3248521475cae26bff5f27a8183$__63bc1b392d6040518163ffffffff1660e01b81526004016040805180830381865af4158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190613557565b905060005b8651811015611df7576000878281518110611d1d57611d1d6134de565b602002602001015190508273__$028df8f3248521475cae26bff5f27a8183$__639f422d99909160405180604001604052808560400151600060028110611d6657611d666134de565b602002015181526020018560400151600160028110611d8757611d876134de565b60200201518152506040518363ffffffff1660e01b8152600401611dac929190613801565b6040805180830381865af4158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190613557565b925050600101611d00565b5060005b8551811015611f80576000868281518110611e1857611e186134de565b602002602001015190508273__$028df8f3248521475cae26bff5f27a8183$__639f422d99909160405180604001604052808560400151600060028110611e6157611e616134de565b602002015181526020018560400151600160028110611e8257611e826134de565b602002015190526040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__91635e20a7f191611ed891906004016137ea565b6040805180830381865af4158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190613557565b6040518363ffffffff1660e01b8152600401611f35929190613801565b6040805180830381865af4158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f759190613557565b925050600101611dfb565b5083516040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__90639f422d999084908390635e20a7f190611fdd908a906004016137ea565b6040805180830381865af4158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d9190613557565b6040518363ffffffff1660e01b815260040161203a929190613801565b6040805180830381865af4158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190613557565b51148015612185575060208401516040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__90639f422d999084908390635e20a7f1906120e2908a906004016137ea565b6040805180830381865af41580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190613557565b6040518363ffffffff1660e01b815260040161213f929190613801565b6040805180830381865af415801561215b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217f9190613557565b60200151145b6121d15760405162461bcd60e51b815260206004820152601a60248201527f53756d206f662076616c75657320697320696e636f7272656374000000000000604482015260640161083f565b60005b86518110156122245760008782815181106121f1576121f16134de565b6020026020010151905061221b81600001516040518060200160405280846020015181525061073a565b506001016121d4565b5060005b8551811015612278576000868281518110612245576122456134de565b6020026020010151905061226f81600001516040518060200160405280846020015181525061084f565b50600101612228565b5060005b86518110156122ef5760016005600089848151811061229d5761229d6134de565b602090810291909101810151810151825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560010161227c565b5084516002146123415760405162461bcd60e51b815260206004820152601a60248201527f6f6e6c792063616e20646f2032206f757470757470726f6f6673000000000000604482015260640161083f565b61234a85612952565b60035461236790600290640100000000900463ffffffff16613884565b63ffffffff1685600081518110612380576123806134de565b6020026020010151602001517fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf03876000815181106123c0576123c06134de565b6020026020010151606001516040516123d991906138a8565b60405180910390a36003546123fe90600190640100000000900463ffffffff16613884565b63ffffffff1685600181518110612417576124176134de565b6020026020010151602001517fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf0387600181518110612457576124576134de565b60200260200101516060015160405161247091906138a8565b60405180910390a360005b865181101561139757868181518110612496576124966134de565b6020026020010151602001517f9218fa47e982bf1ded9b6823b77dbac4a5db62fc73f8efc325c7de424a41180260405160405180910390a260010161247b565b600073__$028df8f3248521475cae26bff5f27a8183$__635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af4158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810185905273__$028df8f3248521475cae26bff5f27a8183$__90632afb4927906064016040805180830381865af41580156125be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e29190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810184905273__$028df8f3248521475cae26bff5f27a8183$__90632afb4927906064015b6040805180830381865af415801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190613557565b90506113978787878486611ba0565b806020015181604001518060200190518101906126ad91906138bb565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208083019190915267ffffffffffffffff8516828401528251808303840181526060909201835281519181019190912060009081526006909152205460ff166127545760405162461bcd60e51b815260206004820152601860248201527f536f7572636520436861696e206e6f7420616c6c6f7765640000000000000000604482015260640161083f565b505050565b600073__$028df8f3248521475cae26bff5f27a8183$__635d90c2d56040518163ffffffff1660e01b81526004016040805180830381865af41580156127a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c79190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810185905273__$028df8f3248521475cae26bff5f27a8183$__90632afb4927906064016040805180830381865af4158015612841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128659190613557565b6040517f2afb49270000000000000000000000000000000000000000000000000000000081528151600482015260209091015160248201526044810184905273__$028df8f3248521475cae26bff5f27a8183$__90632afb4927906064016040805180830381865af41580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613557565b6040517f5e20a7f100000000000000000000000000000000000000000000000000000000815273__$028df8f3248521475cae26bff5f27a8183$__91635e20a7f19161264191906004016137ea565b61299e81600081518110612968576129686134de565b60200260200101516020015160001b8260018151811061298a5761298a6134de565b60200260200101516020015160001b6129a2565b5050565b600354600090640100000000900463ffffffff166129e17f000000000000000000000000000000000000000000000000000000000000000060026139e9565b63ffffffff168163ffffffff1603612a615760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201527f7665732063616e20626520616464656400000000000000000000000000000000606482015260840161083f565b6000612a6e6002836139fe565b90506000612a7c86866108c1565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015612b3e57612ac3600286613a21565b63ffffffff16600003612b0157839250612ae28163ffffffff16611448565b63ffffffff821660009081526001602052604090208590559150612b1d565b63ffffffff811660009081526001602052604090205492508391505b612b2783836108c1565b9350612b346002866139fe565b9450600101612a84565b50600354600090606490612b599063ffffffff166001613a44565b612b639190613a21565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff83169081179091556000908152600260208190526040909120869055909150612bb8908790613a44565b6003805463ffffffff92909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b612c39612c04565b815260200190600190039081612c315790505090565b600060208284031215612c6157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612c9157600080fd5b9392505050565b600060208284031215612caa57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d5957600080fd5b803567ffffffffffffffff81168114611aa057600080fd5b8015158114610d5957600080fd5b600080600060608486031215612d0e57600080fd5b8335612d1981612cb1565b9250612d2760208501612cd3565b91506040840135612d3781612ceb565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612d9457612d94612d42565b60405290565b6040516080810167ffffffffffffffff81118282101715612d9457612d94612d42565b6040805190810167ffffffffffffffff81118282101715612d9457612d94612d42565b60405160a0810167ffffffffffffffff81118282101715612d9457612d94612d42565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e2c57612e2c612d42565b604052919050565b600082601f830112612e4557600080fd5b813567ffffffffffffffff811115612e5f57612e5f612d42565b612e726020601f19601f84011601612e03565b818152846020838601011115612e8757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612eb757600080fd5b823567ffffffffffffffff80821115612ecf57600080fd5b612edb86838701612e34565b93506020915085603f860112612ef057600080fd5b604051602081018181108382111715612f0b57612f0b612d42565b80604052508091506040860187811115612f2457600080fd5b602087015b81811015612f405780358452928401928401612f29565b509497909650945050505050565b60008060408385031215612f6157600080fd5b50508035926020909101359150565b600067ffffffffffffffff821115612f8a57612f8a612d42565b5060051b60200190565b600082601f830112612fa557600080fd5b612fad612dbd565b806040840185811115612fbf57600080fd5b845b81811015612fd9578035845260209384019301612fc1565b509095945050505050565b600082601f830112612ff557600080fd5b8135602061300a61300583612f70565b612e03565b82815260059290921b8401810191818101908684111561302957600080fd5b8286015b848110156130c057803567ffffffffffffffff8082111561304e5760008081fd5b908801906080828b03601f190112156130675760008081fd5b61306f612d71565b86830135828111156130815760008081fd5b61308f8c8983870101612e34565b8252506040915081830135878201526130ab8b60608501612f94565b9181019190915284525091830191830161302d565b509695505050505050565b600082601f8301126130dc57600080fd5b813560206130ec61300583612f70565b82815260059290921b8401810191818101908684111561310b57600080fd5b8286015b848110156130c057803567ffffffffffffffff808211156131305760008081fd5b818901915060a080601f19848d0301121561314b5760008081fd5b613153612d9a565b87840135838111156131655760008081fd5b6131738d8a83880101612e34565b82525060408085013589830152606061318e8e828801612f94565b838301529285013592848411156131a757600091508182fd5b6131b58e8b86890101612e34565b9083015250865250505091830191830161310f565b60008060008060a085870312156131e057600080fd5b843567ffffffffffffffff808211156131f857600080fd5b61320488838901612fe4565b9550602087013591508082111561321a57600080fd5b50613227878288016130cb565b9350506132378660408701612f94565b9396929550929360800135925050565b60008060008060008060e0878903121561326057600080fd5b863567ffffffffffffffff8082111561327857600080fd5b6132848a838b01612fe4565b9750602089013591508082111561329a57600080fd5b506132a789828a016130cb565b9550506132b78860408901612f94565b93506080870135925060a0870135915060c087013590509295509295509295565b6000602082840312156132ea57600080fd5b813567ffffffffffffffff81111561330157600080fd5b820160a08185031215612c9157600080fd5b60008060008060c0858703121561332957600080fd5b8435935061333a8660208701612f94565b92506133498660608701612f94565b915060a085013567ffffffffffffffff81111561336557600080fd5b61337187828801612e34565b91505092959194509250565b6000806040838503121561339057600080fd5b61339983612cd3565b915060208301356133a981612ceb565b809150509250929050565b6000806000606084860312156133c957600080fd5b8335925060208401356133db81612cb1565b9150604084013560ff81168114612d3757600080fd5b8060005b60028110156134145781518452602093840193909101906001016133f5565b50505050565b610120810161342982876133f1565b60408083018660005b6002808210613441575061347c565b82518460005b83811015613465578251825260209283019290910190600101613447565b505050928401925060209190910190600101613432565b5050505061348d60c08301856133f1565b61010082018360005b60018110156134b5578151835260209283019290910190600101613496565b50505095945050505050565b6000602082840312156134d357600080fd5b8151612c9181612ceb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408101818360005b6002811015613535578151835260209283019290910190600101613516565b50505092915050565b60006020828403121561355057600080fd5b5051919050565b60006040828403121561356957600080fd5b613571612dbd565b82518152602083015160208201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff8216806135ce576135ce613589565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082601f83011261360757600080fd5b8135602061361761300583612f70565b82815260069290921b8401810191818101908684111561363657600080fd5b8286015b848110156130c057604081890312156136535760008081fd5b61365b612dbd565b813561366681612cb1565b8152818501358582015283529183019160400161363a565b600060a0823603121561369057600080fd5b613698612de0565b823581526136a860208401612cd3565b6020820152604083013567ffffffffffffffff808211156136c857600080fd5b6136d436838701612e34565b604084015260608501359150808211156136ed57600080fd5b6136f936838701612e34565b6060840152608085013591508082111561371257600080fd5b5061371f368286016135f6565b60808301525092915050565b6000815180845260005b8181101561375157602081850181015186830182015201613735565b506000602082860101526020601f19601f83011685010191505092915050565b85815284602082015283604082015282606082015260a06080820152600061379c60a083018461372b565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826137e5576137e56137a7565b500690565b815181526020808301519082015260408101610692565b825181526020808401518183015282516040830152820151606082015260808101612c91565b600080600080600080600080610100898b03121561384457600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b63ffffffff8281168282160390808211156138a1576138a1613589565b5092915050565b602081526000612c91602083018461372b565b6000602082840312156138cd57600080fd5b8151612c9181612cb1565b600181815b80851115613915578163ffffffff048211156138fb576138fb613589565b8085161561390857918102915b93841c93908002906138dd565b509250929050565b60008261392c57506001610692565b8161393957506000610692565b816001811461394f57600281146139595761398a565b6001915050610692565b60ff84111561396a5761396a613589565b6001841b915063ffffffff82111561398457613984613589565b50610692565b5060208310610133831016604e8410600b84101617156139c1575081810a63ffffffff8111156139bc576139bc613589565b610692565b6139cb83836138d8565b8063ffffffff048211156139e1576139e1613589565b029392505050565b600063ffffffff610a7081851682851661391d565b600063ffffffff80841680613a1557613a156137a7565b92169190910492915050565b600063ffffffff80841680613a3857613a386137a7565b92169190910692915050565b63ffffffff8181168382160190808211156138a1576138a161358956fea26469706673582212202874f5f12b3ddbcd711397ce649ced672f2960858d43a13b36b7f91787fb1b4d64736f6c63430008190033",
  "libraries": {
    "EdOnBN254": "0xaaCd292B475c6Cd2543DaC465516Ab5d7fCd27f3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "getRouter()": {
        "returns": {
          "_0": "CCIP router address"
        }
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns Poseidon(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "supportsInterface(bytes4)": {
        "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "router()": {
        "notice": "Chainlink CCIP Router Address - used to send messages across chains"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1517,
        "contract": "contracts/RK.sol:RK",
        "label": "hasher",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHasher)1508"
      },
      {
        "astId": 1523,
        "contract": "contracts/RK.sol:RK",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1527,
        "contract": "contracts/RK.sol:RK",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1533,
        "contract": "contracts/RK.sol:RK",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1536,
        "contract": "contracts/RK.sol:RK",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 348,
        "contract": "contracts/RK.sol:RK",
        "label": "spendVerifier",
        "offset": 8,
        "slot": "3",
        "type": "t_contract(SpendVerifier)2831"
      },
      {
        "astId": 351,
        "contract": "contracts/RK.sol:RK",
        "label": "outputVerifier",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(OutputVerifier)2734"
      },
      {
        "astId": 367,
        "contract": "contracts/RK.sol:RK",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2176,
        "contract": "contracts/RK.sol:RK",
        "label": "allowedRemotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2180,
        "contract": "contracts/RK.sol:RK",
        "label": "allowedChainIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 2184,
        "contract": "contracts/RK.sol:RK",
        "label": "allowlistedChains",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 2187,
        "contract": "contracts/RK.sol:RK",
        "label": "gasLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2229,
        "contract": "contracts/RK.sol:RK",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2394,
        "contract": "contracts/RK.sol:RK",
        "label": "assetToAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(SupportedAsset)2389_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHasher)1508": {
        "encoding": "inplace",
        "label": "contract IHasher",
        "numberOfBytes": "20"
      },
      "t_contract(OutputVerifier)2734": {
        "encoding": "inplace",
        "label": "contract OutputVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(SpendVerifier)2831": {
        "encoding": "inplace",
        "label": "contract SpendVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(SupportedAsset)2389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RK.SupportedAsset)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportedAsset)2389_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(SupportedAsset)2389_storage": {
        "encoding": "inplace",
        "label": "struct RK.SupportedAsset",
        "members": [
          {
            "astId": 2384,
            "contract": "contracts/RK.sol:RK",
            "label": "assetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2386,
            "contract": "contracts/RK.sol:RK",
            "label": "assetAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2388,
            "contract": "contracts/RK.sol:RK",
            "label": "decimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}