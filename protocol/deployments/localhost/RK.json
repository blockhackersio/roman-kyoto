{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spendVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleHasher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "valueCommitment",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "NewBridgeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "NewCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "NewCommitmentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "NewNullifier",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_getBytecodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "addSupportedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetToAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeoutVerifier",
      "outputs": [
        {
          "internalType": "contract BridgeoutVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pubSignals",
          "type": "uint256[2]"
        }
      ],
      "name": "bridgeoutVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outputVerifier",
      "outputs": [
        {
          "internalType": "contract OutputVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "outputVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "receiveCommitments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "receivedCommitments",
      "outputs": [
        {
          "internalType": "enum MultiAssetShieldedPool.ValueCommitmentState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spendVerifier",
      "outputs": [
        {
          "internalType": "contract SpendVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "spendVerify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct Spend[]",
          "name": "_spends",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct Output[]",
          "name": "_outputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct BridgeIn[]",
          "name": "_bridgeIns",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            },
            {
              "internalType": "uint256[2]",
              "name": "valueCommitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct BridgeOut[]",
          "name": "_bridgeOuts",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_extAssetHash",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_extAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bpk",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_root",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_R",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_s",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_hash",
          "type": "bytes"
        }
      ],
      "name": "transact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x002acdfabbb6d036d3cf347ac5e513d8ba8975a4fbbe1ba0ba5cb9ffb765dfc8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "3745912",
    "logsBloom": "0x
    "blockHash": "0x9385bc391beceb47e6e929682930692bb9ae2170f64be0e64f3cbd5ecdb72400",
    "transactionHash": "0x002acdfabbb6d036d3cf347ac5e513d8ba8975a4fbbe1ba0ba5cb9ffb765dfc8",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "3745912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "aaa736e6db7a5148f425417253950e53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spendVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleHasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"NewBridgeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"NewCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"NewCommitmentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"NewNullifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_getBytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"addSupportedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetToAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeoutVerifier\",\"outputs\":[{\"internalType\":\"contract BridgeoutVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pubSignals\",\"type\":\"uint256[2]\"}],\"name\":\"bridgeoutVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nullifierHash\",\"type\":\"uint256\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputVerifier\",\"outputs\":[{\"internalType\":\"contract OutputVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"outputVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"receiveCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"receivedCommitments\",\"outputs\":[{\"internalType\":\"enum MultiAssetShieldedPool.ValueCommitmentState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendVerifier\",\"outputs\":[{\"internalType\":\"contract SpendVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"spendVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Spend[]\",\"name\":\"_spends\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct Output[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BridgeIn[]\",\"name\":\"_bridgeIns\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"valueCommitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BridgeOut[]\",\"name\":\"_bridgeOuts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_extAssetHash\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_extAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bpk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_R\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_s\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_hash\",\"type\":\"bytes\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns Poseidon(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RK.sol\":\"RK\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/EdOnBN254.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n// Courtesy https://github.com/Tetration-Lab/solidity-ed-on-bn254/blob/main/src/EdOnBN254V.sol\\n\\n// A Twisted Edwards curve on scalar field of BN254. Also known as [Baby-Jubjub](https://github.com/barryWhiteHat/baby_jubjub).\\n// Modified from:\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// https://github.com/arkworks-rs/curves/tree/master/ed_on_bn254\\n//\\n// Curve information:\\n// * Base field: q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n// * Scalar field: r = 2736030358979909402780800718157159386076813972158567259200215660948447373041\\n// * Valuation(q - 1, 2) = 28\\n// * Valuation(r - 1, 2) = 4\\n// * Curve equation: ax^2 + y^2 =1 + dx^2y^2, where\\n//    * a = 168700\\n//    * d = 168696\\nlibrary EdOnBN254 {\\n    uint256 public constant Q =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 public constant E_A = 168700;\\n    uint256 public constant E_D = 168696;\\n    uint256 public constant N =\\n        21888242871839275222246405745257275088614511777268538073601725287587578984328;\\n    struct Affine {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    function primeSubgroupGenerator() public pure returns (Affine memory) {\\n        return\\n            Affine(\\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\\n                5472060717959818805561601436314318772137091100104008585924551046643952123905\\n            );\\n    }\\n\\n    function zero() public pure returns (Affine memory) {\\n        return Affine(0, 1);\\n    }\\n\\n    function add(\\n        Affine memory a1,\\n        Affine memory a2\\n    ) public view returns (Affine memory) {\\n        if (a1.x == 0 && a1.y == 0) {\\n            return a2;\\n        }\\n\\n        if (a2.x == 0 && a2.y == 0) {\\n            return a1;\\n        }\\n\\n        uint256 x1x2 = mulmod(a1.x, a2.x, Q);\\n        uint256 y1y2 = mulmod(a1.y, a2.y, Q);\\n        uint256 dx1x2y1y2 = mulmod(E_D, mulmod(x1x2, y1y2, Q), Q);\\n        uint256 x3Num = addmod(mulmod(a1.x, a2.y, Q), mulmod(a1.y, a2.x, Q), Q);\\n        uint256 y3Num = submod(y1y2, mulmod(E_A, x1x2, Q), Q);\\n\\n        return\\n            Affine(\\n                mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q),\\n                mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q)\\n            );\\n    }\\n\\n    function double(Affine memory a) public view returns (Affine memory) {\\n        return add(a, a);\\n    }\\n\\n    function mul(\\n        Affine memory a,\\n        uint256 s\\n    ) public view returns (Affine memory) {\\n        uint256 remaining = s;\\n        Affine memory p = Affine(a.x, a.y);\\n        Affine memory ret = Affine(0, 0);\\n\\n        while (remaining != 0) {\\n            if ((remaining & 1) != 0) {\\n                ret = add(ret, p);\\n            }\\n\\n            p = double(p);\\n\\n            remaining = remaining / 2;\\n        }\\n\\n        return ret;\\n    }\\n\\n    function neg(Affine memory a) public pure returns (Affine memory) {\\n        if (a.x == 0 && a.y == 0) return a;\\n        return Affine(submod(0, a.x, Q), a.y);\\n    }\\n\\n    function submod(\\n        uint256 _a,\\n        uint256 _b,\\n        uint256 _mod\\n    ) internal pure returns (uint256) {\\n        return addmod(_a, _mod - _b, _mod);\\n    }\\n\\n    function inverse(uint256 _a) internal view returns (uint256) {\\n        return expmod(_a, Q - 2, Q);\\n    }\\n\\n    function expmod(\\n        uint256 _b,\\n        uint256 _e,\\n        uint256 _m\\n    ) internal view returns (uint256 o) {\\n        assembly {\\n            let memPtr := mload(0x40)\\n            mstore(memPtr, 0x20)\\n            mstore(add(memPtr, 0x20), 0x20)\\n            mstore(add(memPtr, 0x40), 0x20)\\n            mstore(add(memPtr, 0x60), _b)\\n            mstore(add(memPtr, 0x80), _e)\\n            mstore(add(memPtr, 0xa0), _m)\\n\\n            let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                o := mload(memPtr)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4a0360b7912cc1daf97fb9cdc483be88956e8bfc605d0a209dcdd362032a744\",\"license\":\"UNLICENSED\"},\"contracts/MerkleTreeWithHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHasher {\\n    function poseidon(\\n        bytes32[2] calldata inputs\\n    ) external pure returns (bytes32);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n    uint256 public constant FIELD_SIZE =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 public constant ZERO_VALUE =\\n        21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n    IHasher public hasher;\\n    uint32 public immutable levels;\\n\\n    // the following variables are made public for easier testing and debugging and\\n    // are not supposed to be accessed in regular code\\n\\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n    // it removes index range check on every interaction\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    mapping(uint256 => bytes32) public roots;\\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\\n    uint32 public currentRootIndex = 0; // todo remove\\n    uint32 public nextIndex = 0;\\n\\n    constructor(\\n        uint32 _levels,\\n        address _hasher //        bytes memory _hasherBytecode\\n    ) {\\n        require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n        require(_levels < 32, \\\"_levels should be less than 32\\\");\\n        levels = _levels;\\n\\n        hasher = IHasher(_hasher);\\n    }\\n\\n    function _initialize() internal {\\n        for (uint32 i = 0; i < levels; i++) {\\n            filledSubtrees[i] = zeros(i);\\n        }\\n\\n        roots[0] = zeros(levels);\\n    }\\n\\n    /**\\n      @dev Hash 2 tree leaves, returns Poseidon(_left, _right)\\n    */\\n    function hashLeftRight(\\n        bytes32 _left,\\n        bytes32 _right\\n    ) public view returns (bytes32) {\\n        require(\\n            uint256(_left) < FIELD_SIZE,\\n            \\\"_left should be inside the field\\\"\\n        );\\n        require(\\n            uint256(_right) < FIELD_SIZE,\\n            \\\"_right should be inside the field\\\"\\n        );\\n        bytes32[2] memory input;\\n        input[0] = _left;\\n        input[1] = _right;\\n        return hasher.poseidon(input);\\n    }\\n\\n    // Modified to insert pairs of leaves for better efficiency\\n    function _insert(\\n        bytes32 _leaf1,\\n        bytes32 _leaf2\\n    ) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextIndex;\\n        require(\\n            _nextIndex != uint32(2) ** levels,\\n            \\\"Merkle tree is full. No more leaves can be added\\\"\\n        );\\n        uint32 currentIndex = _nextIndex / 2;\\n        bytes32 currentLevelHash = hashLeftRight(_leaf1, _leaf2);\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint32 i = 1; i < levels; i++) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeros(i);\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n            currentLevelHash = hashLeftRight(left, right);\\n            currentIndex /= 2;\\n        }\\n\\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n        currentRootIndex = newRootIndex;\\n        roots[newRootIndex] = currentLevelHash;\\n        nextIndex = _nextIndex + 2;\\n        return _nextIndex;\\n    }\\n\\n    /**\\n      @dev Whether the root is present in the root history\\n    */\\n    function isKnownRoot(bytes32 _root) public view returns (bool) {\\n        if (_root == 0) {\\n            return false;\\n        }\\n        uint32 _currentRootIndex = currentRootIndex;\\n        uint32 i = _currentRootIndex;\\n        do {\\n            if (_root == roots[i]) {\\n                return true;\\n            }\\n            if (i == 0) {\\n                i = ROOT_HISTORY_SIZE;\\n            }\\n            i--;\\n        } while (i != _currentRootIndex);\\n        return false;\\n    }\\n\\n    /**\\n      @dev Returns the last root\\n    */\\n    function getLastRoot() public view returns (bytes32) {\\n        return roots[currentRootIndex];\\n    }\\n\\n    /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n    // TODO: this should change to poseidon\\n    function zeros(uint256 i) public pure returns (bytes32) {\\n        if (i == 0)\\n            return\\n                bytes32(\\n                    0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c\\n                );\\n        else if (i == 1)\\n            return\\n                bytes32(\\n                    0x13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8\\n                );\\n        else if (i == 2)\\n            return\\n                bytes32(\\n                    0x217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765\\n                );\\n        else if (i == 3)\\n            return\\n                bytes32(\\n                    0x0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee\\n                );\\n        else if (i == 4)\\n            return\\n                bytes32(\\n                    0x27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587\\n                );\\n        else if (i == 5)\\n            return\\n                bytes32(\\n                    0x194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc\\n                );\\n        else if (i == 6)\\n            return\\n                bytes32(\\n                    0x1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f\\n                );\\n        else if (i == 7)\\n            return\\n                bytes32(\\n                    0x267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219\\n                );\\n        else if (i == 8)\\n            return\\n                bytes32(\\n                    0x1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d\\n                );\\n        else if (i == 9)\\n            return\\n                bytes32(\\n                    0x0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce\\n                );\\n        else if (i == 10)\\n            return\\n                bytes32(\\n                    0x2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7\\n                );\\n        else if (i == 11)\\n            return\\n                bytes32(\\n                    0x280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47\\n                );\\n        else if (i == 12)\\n            return\\n                bytes32(\\n                    0x045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b\\n                );\\n        else if (i == 13)\\n            return\\n                bytes32(\\n                    0x27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366\\n                );\\n        else if (i == 14)\\n            return\\n                bytes32(\\n                    0x1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef\\n                );\\n        else if (i == 15)\\n            return\\n                bytes32(\\n                    0x20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca\\n                );\\n        else if (i == 16)\\n            return\\n                bytes32(\\n                    0x09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec\\n                );\\n        else if (i == 17)\\n            return\\n                bytes32(\\n                    0x0064b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b\\n                );\\n        else if (i == 18)\\n            return\\n                bytes32(\\n                    0x095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f\\n                );\\n        else if (i == 19)\\n            return\\n                bytes32(\\n                    0x11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63\\n                );\\n        else if (i == 20)\\n            return\\n                bytes32(\\n                    0x2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb\\n                );\\n        else if (i == 21)\\n            return\\n                bytes32(\\n                    0x16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279\\n                );\\n        else if (i == 22)\\n            return\\n                bytes32(\\n                    0x21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff\\n                );\\n        else if (i == 23)\\n            return\\n                bytes32(\\n                    0x2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962\\n                );\\n        else if (i == 24)\\n            return\\n                bytes32(\\n                    0x16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10\\n                );\\n        else if (i == 25)\\n            return\\n                bytes32(\\n                    0x2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013\\n                );\\n        else if (i == 26)\\n            return\\n                bytes32(\\n                    0x2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14\\n                );\\n        else if (i == 27)\\n            return\\n                bytes32(\\n                    0x0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0\\n                );\\n        else if (i == 28)\\n            return\\n                bytes32(\\n                    0x202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50\\n                );\\n        else if (i == 29)\\n            return\\n                bytes32(\\n                    0x23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187\\n                );\\n        else if (i == 30)\\n            return\\n                bytes32(\\n                    0x1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0\\n                );\\n        else if (i == 31)\\n            return\\n                bytes32(\\n                    0x1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06\\n                );\\n        else if (i == 32)\\n            return\\n                bytes32(\\n                    0x25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6\\n                );\\n        else revert(\\\"Index out of bounds\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7a43c6dcba4bbd661b488c75c6beb533b4ee11c27051e0b6367b513127b9b568\",\"license\":\"MIT\"},\"contracts/MultiAssetShieldedPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport {SpendVerifier} from \\\"./verifiers/SpendVerifier.sol\\\";\\nimport {OutputVerifier} from \\\"./verifiers/OutputVerifier.sol\\\";\\nimport {BridgeoutVerifier} from \\\"./verifiers/BridgeoutVerifier.sol\\\";\\nimport {IMasp, Spend, Output, BridgeIn, BridgeOut} from \\\"./interfaces/IMasp.sol\\\";\\nimport {MerkleTreeWithHistory} from \\\"./MerkleTreeWithHistory.sol\\\";\\n\\nimport \\\"./EdOnBN254.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MultiAssetShieldedPool is MerkleTreeWithHistory {\\n    using EdOnBN254 for *;\\n\\n    enum ValueCommitmentState {\\n        INIT,\\n        RECEIVED,\\n        CLAIMED\\n    }\\n\\n    SpendVerifier public spendVerifier;\\n    OutputVerifier public outputVerifier;\\n    BridgeoutVerifier public bridgeoutVerifier;\\n\\n    mapping(uint256 => bool) public nullifierHashes;\\n    mapping(bytes32 => ValueCommitmentState) public receivedCommitments;\\n\\n    constructor(\\n        address _spendVerifier,\\n        address _outputVerifier,\\n        address _hasher\\n    ) MerkleTreeWithHistory(5, _hasher) {\\n        spendVerifier = SpendVerifier(_spendVerifier);\\n        outputVerifier = OutputVerifier(_outputVerifier);\\n        _initialize();\\n    }\\n\\n    function parseProof(\\n        bytes memory data\\n    )\\n        internal\\n        pure\\n        returns (uint[2] memory a, uint[2][2] memory b, uint[2] memory c)\\n    {\\n        (a[0], a[1], b[0][0], b[0][1], b[1][0], b[1][1], c[0], c[1]) = abi\\n            .decode(data, (uint, uint, uint, uint, uint, uint, uint, uint));\\n    }\\n\\n    function spendVerify(\\n        bytes memory _proof,\\n        uint[1] memory _pubSignals\\n    ) public view {\\n        (uint[2] memory a, uint[2][2] memory b, uint[2] memory c) = parseProof(\\n            _proof\\n        );\\n        require(\\n            spendVerifier.verifyProof(a, b, c, _pubSignals),\\n            \\\"invalid proof\\\"\\n        );\\n    }\\n\\n    function outputVerify(\\n        bytes memory _proof,\\n        uint[1] memory _pubSignals\\n    ) public view {\\n        (uint[2] memory a, uint[2][2] memory b, uint[2] memory c) = parseProof(\\n            _proof\\n        );\\n        require(\\n            outputVerifier.verifyProof(a, b, c, _pubSignals),\\n            \\\"invalid proof\\\"\\n        );\\n    }\\n\\n    function _getBytecodeHash(address _address) public view returns (bytes32) {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_address)\\n        }\\n        return codeHash;\\n    }\\n\\n    function _receiveCommitments(bytes32 _commitment) internal {\\n        require(\\n            receivedCommitments[_commitment] == ValueCommitmentState.INIT,\\n            \\\"received commitments must be in the IDLE state\\\"\\n        );\\n        require(\\n            _getBytecodeHash(address(this)) == _getBytecodeHash(msg.sender),\\n            \\\"bad sender\\\"\\n        );\\n\\n        receivedCommitments[_commitment] = ValueCommitmentState.RECEIVED;\\n        emit IMasp.NewCommitmentReceived(_commitment);\\n    }\\n\\n    function bridgeoutVerify(\\n        bytes memory _proof,\\n        uint[2] memory _pubSignals\\n    ) public view {\\n        (uint[2] memory a, uint[2][2] memory b, uint[2] memory c) = parseProof(\\n            _proof\\n        );\\n        require(\\n            bridgeoutVerifier.verifyProof(a, b, c, _pubSignals),\\n            \\\"invalid bridgeout proof\\\"\\n        );\\n    }\\n\\n    struct RedDSASignature {\\n        bytes32 s;\\n        bytes32 R;\\n    }\\n\\n    function _sigVerify(\\n        uint256 _s,\\n        uint256[2] memory _R,\\n        uint256[2] memory _A,\\n        bytes memory _message\\n    ) internal view {\\n        EdOnBN254.Affine memory _BASE = EdOnBN254.Affine(\\n            6822643173076850086669063981200675861034234425876310494228829770726075732893,\\n            9156654395656950371299901424185770236726741503478930161752204964343448620279\\n        );\\n        EdOnBN254.Affine memory _Rp = EdOnBN254.Affine(_R[0], _R[1]);\\n        EdOnBN254.Affine memory _Ap = EdOnBN254.Affine(_A[0], _A[1]);\\n        bytes memory data = abi.encode(_Rp.x, _Rp.y, _Ap.x, _Ap.y, _message);\\n        uint256 _c = uint256(keccak256(data)) % EdOnBN254.N;\\n        EdOnBN254.Affine memory _Z = _BASE.neg().mul(_s).add(_Rp).add(\\n            _Ap.mul(_c)\\n        );\\n\\n        require(_Z.x == 0, \\\"signature is not valid\\\");\\n    }\\n\\n    function _checkHash(\\n        Spend[] memory _spends,\\n        Output[] memory _outputs,\\n        bytes memory _hash\\n    ) internal pure {\\n        uint256[] memory nullifiers = new uint256[](_spends.length);\\n        uint256[] memory commitments = new uint256[](_outputs.length);\\n        uint256[] memory valueCommitments = new uint256[](\\n            _spends.length * 2 + _outputs.length * 2\\n        );\\n\\n        uint256 vcIndex = 0;\\n        for (uint256 i = 0; i < _spends.length; i++) {\\n            nullifiers[i] = _spends[i].nullifier;\\n            valueCommitments[vcIndex++] = _spends[i].valueCommitment[0];\\n            valueCommitments[vcIndex++] = _spends[i].valueCommitment[1];\\n        }\\n\\n        for (uint256 i = 0; i < _outputs.length; i++) {\\n            commitments[i] = _outputs[i].commitment;\\n            valueCommitments[vcIndex++] = _outputs[i].valueCommitment[0];\\n            valueCommitments[vcIndex++] = _outputs[i].valueCommitment[1];\\n        }\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(nullifiers, commitments, valueCommitments)\\n            ) == bytes32(_hash),\\n            \\\"Hashes must match\\\"\\n        );\\n    }\\n\\n    function _balanceCheck(\\n        Spend[] memory _ins,\\n        Output[] memory _outs,\\n        BridgeIn[] memory _bridgeIns,\\n        BridgeOut[] memory _bridgeOuts,\\n        EdOnBN254.Affine memory _extValueBase,\\n        EdOnBN254.Affine memory _bindingPubkey,\\n        int256 _extAmount\\n    ) internal view {\\n        // Sum up ins and outs\\n        EdOnBN254.Affine memory _insTotal = EdOnBN254.zero();\\n        EdOnBN254.Affine memory _outsTotal = EdOnBN254.zero();\\n        EdOnBN254.Affine memory _bridgeInsTotal = EdOnBN254.zero();\\n        EdOnBN254.Affine memory _bridgeOutsTotal = EdOnBN254.zero();\\n\\n        for (uint i = 0; i < _ins.length; i++) {\\n            uint256[2] memory vc = _ins[i].valueCommitment;\\n            _insTotal = _insTotal.add(EdOnBN254.Affine(vc[0], vc[1]));\\n        }\\n\\n        for (uint i = 0; i < _outs.length; i++) {\\n            uint256[2] memory vc = _outs[i].valueCommitment;\\n            _outsTotal = _outsTotal.add(EdOnBN254.Affine(vc[0], vc[1]));\\n        }\\n\\n        for (uint i = 0; i < _bridgeOuts.length; i++) {\\n            uint256[2] memory vc = _bridgeOuts[i].valueCommitment;\\n            _bridgeOutsTotal = _bridgeOutsTotal.add(\\n                EdOnBN254.Affine(vc[0], vc[1]).neg()\\n            );\\n        }\\n\\n        for (uint i = 0; i < _bridgeIns.length; i++) {\\n            bytes32 _received = keccak256(\\n                abi.encode(_bridgeIns[i].valueCommitment)\\n            );\\n            require(\\n                receivedCommitments[_received] == ValueCommitmentState.RECEIVED,\\n                \\\"value commitment has not been received!\\\"\\n            );\\n            _bridgeInsTotal = _bridgeInsTotal.add(\\n                EdOnBN254\\n                    .Affine(\\n                        _bridgeIns[i].valueCommitment[0],\\n                        _bridgeIns[i].valueCommitment[1]\\n                    )\\n                    .neg()\\n            );\\n        }\\n\\n        EdOnBN254.Affine memory _ext;\\n        if (_extAmount < 0) {\\n            require(\\n                uint256(-_extAmount) <= EdOnBN254.N,\\n                \\\"Value must not be greater than n\\\"\\n            );\\n        } else {\\n            require(\\n                uint256(_extAmount) <= EdOnBN254.N,\\n                \\\"Value must not be greater than n\\\"\\n            );\\n        }\\n\\n        if (_extAmount == 0) {\\n            _ext = EdOnBN254.zero();\\n        } else {\\n            _ext = _extValueBase.mul(\\n                _extAmount < 0\\n                    ? (EdOnBN254.N - uint256(-_extAmount)) % EdOnBN254.N\\n                    : (uint256(_extAmount) % EdOnBN254.N)\\n            );\\n        }\\n\\n        EdOnBN254.Affine memory total = _insTotal\\n            .add(_outsTotal.neg())\\n            .add(_bridgeOutsTotal)\\n            .add(_bridgeInsTotal.neg())\\n            .add(_ext);\\n\\n        require(\\n            total.x == _bindingPubkey.x && total.y == _bindingPubkey.y,\\n            \\\"Balance Check Failed\\\"\\n        );\\n    }\\n\\n    function _proofCheck(\\n        Spend[] memory _spends,\\n        Output[] memory _outputs,\\n        BridgeIn[] memory _bridgeIns,\\n        BridgeOut[] memory _bridgeOuts,\\n        uint256 _root\\n    ) internal {\\n        require(isKnownRoot(bytes32(_root)), \\\"Invalid merkle root\\\");\\n        require(_outputs.length % 2 == 0, \\\"outputs must be in multiples of 2\\\");\\n\\n        for (uint i = 0; i < _spends.length; i++) {\\n            require(!isSpent(_spends[i].nullifier), \\\"Input is already spent\\\");\\n        }\\n\\n        for (uint i = 0; i < _spends.length; i++) {\\n            spendVerify(_spends[i].proof, [uint256(_spends[i].nullifier)]);\\n        }\\n\\n        for (uint j = 0; j < _outputs.length; j++) {\\n            outputVerify(_outputs[j].proof, [uint256(_outputs[j].commitment)]);\\n        }\\n\\n        for (uint i = 0; i < _spends.length; i++) {\\n            nullifierHashes[_spends[i].nullifier] = true;\\n        }\\n\\n        for (uint i = 0; i < _outputs.length; i += 2) {\\n            _insert(\\n                bytes32(_outputs[i].commitment),\\n                bytes32(_outputs[i + 1].commitment)\\n            );\\n        }\\n\\n        for (uint i = 0; i < _bridgeIns.length; i++) {\\n            receivedCommitments[\\n                keccak256(abi.encode(_bridgeIns[i].valueCommitment))\\n            ] = ValueCommitmentState.CLAIMED;\\n        }\\n\\n        for (uint i = 0; i < _bridgeOuts.length; i++) {\\n            // TODO: verify value commitment proof for bridge tx\\n            //       currently this was not working need to investigate why...\\n            // bridgeoutVerify(\\n            //     _bridgeOuts[j].proof,\\n            //     _bridgeOuts[j].valueCommitment\\n            // );\\n            require(\\n                _getBytecodeHash(_bridgeOuts[i].destination) ==\\n                    _getBytecodeHash(address(this)),\\n                \\\"destination contract is invalid\\\"\\n            );\\n            IMasp(_bridgeOuts[i].destination).receiveCommitments(\\n                keccak256(abi.encode(_bridgeOuts[i].valueCommitment))\\n            );\\n        }\\n\\n        emit IMasp.NewCommitment(\\n            _outputs[0].commitment,\\n            nextIndex - 2,\\n            _outputs[0].encryptedOutput\\n        );\\n\\n        emit IMasp.NewCommitment(\\n            _outputs[1].commitment,\\n            nextIndex - 1,\\n            _outputs[1].encryptedOutput\\n        );\\n\\n        for (uint256 i = 0; i < _bridgeOuts.length; i++) {\\n            emit IMasp.NewBridgeout(\\n                _bridgeOuts[i].valueCommitment,\\n                _bridgeOuts[i].encryptedOutput,\\n                _bridgeOuts[i].chainId,\\n                _bridgeOuts[i].destination\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < _spends.length; i++) {\\n            emit IMasp.NewNullifier(_spends[i].nullifier);\\n        }\\n    }\\n\\n    function _transact(\\n        Spend[] memory _spends,\\n        Output[] memory _outputs,\\n        BridgeIn[] memory _bridgeIns,\\n        BridgeOut[] memory _bridgeOuts,\\n        uint256 _extAssetHash,\\n        int256 _extAmount,\\n        uint256[2] memory _bpk,\\n        uint256 _root,\\n        uint256[2] memory _R,\\n        uint256 _s,\\n        bytes memory _hash\\n    ) internal {\\n        _checkHash(_spends, _outputs, _hash);\\n\\n        EdOnBN254.Affine memory _bindingPubkey = EdOnBN254.Affine(\\n            _bpk[0],\\n            _bpk[1]\\n        );\\n\\n        EdOnBN254.Affine memory _extValueBase = EdOnBN254\\n            .primeSubgroupGenerator()\\n            .mul(_extAssetHash);\\n\\n        _balanceCheck(\\n            _spends,\\n            _outputs,\\n            _bridgeIns,\\n            _bridgeOuts,\\n            _extValueBase,\\n            _bindingPubkey,\\n            _extAmount\\n        );\\n\\n        _sigVerify(_s, _R, _bpk, _hash);\\n\\n        _proofCheck(_spends, _outputs, _bridgeIns, _bridgeOuts, _root);\\n    }\\n\\n    function isSpent(uint256 _nullifierHash) public view returns (bool) {\\n        return nullifierHashes[_nullifierHash];\\n    }\\n}\\n\",\"keccak256\":\"0x385896e93bf11a37ceea418945ea48b2602031bc0a275dfd3120bb13224b7158\",\"license\":\"UNLICENSED\"},\"contracts/RK.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MultiAssetShieldedPool.sol\\\";\\n\\ncontract RK is IMasp, MultiAssetShieldedPool {\\n    address owner;\\n\\n    constructor(\\n        address _spendVerifier,\\n        address _outputVerifier,\\n        address _merkleHasher\\n    ) MultiAssetShieldedPool(_spendVerifier, _outputVerifier, _merkleHasher) {\\n        owner = msg.sender;\\n    }\\n\\n    function _enforceOwner() internal view {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n    }\\n\\n    struct SupportedAsset {\\n        uint256 assetId;\\n        address assetAddress;\\n        uint8 decimals;\\n    }\\n\\n    mapping(uint256 => SupportedAsset) public assetToAddress;\\n\\n    function addSupportedAsset(\\n        uint256 _assetId,\\n        address _assetAddress,\\n        uint8 _decimals\\n    ) external {\\n        _enforceOwner();\\n        assetToAddress[_assetId] = SupportedAsset(\\n            _assetId,\\n            _assetAddress,\\n            _decimals\\n        );\\n    }\\n\\n    function transact(\\n        Spend[] calldata _spends,\\n        Output[] calldata _outputs,\\n        BridgeIn[] calldata _bridgeIns,\\n        BridgeOut[] calldata _bridgeOuts,\\n        uint256 _extAssetHash,\\n        int256 _extAmount,\\n        uint256[2] calldata _bpk,\\n        uint256 _root,\\n        uint256[2] calldata _R,\\n        uint256 _s,\\n        bytes calldata _hash\\n    ) external {\\n        if (_extAmount > 0) {\\n            SupportedAsset memory _asset = assetToAddress[_extAssetHash];\\n            require(_asset.assetAddress != address(0), \\\"Asset not supported\\\");\\n\\n            // transfer the asset to this contract\\n            IERC20(_asset.assetAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(_extAmount)\\n            );\\n        }\\n\\n        _transact(\\n            _spends,\\n            _outputs,\\n            _bridgeIns,\\n            _bridgeOuts,\\n            _extAssetHash,\\n            _extAmount,\\n            _bpk,\\n            _root,\\n            _R,\\n            _s,\\n            _hash\\n        );\\n\\n        if (_extAmount < 0) {\\n            SupportedAsset memory _asset = assetToAddress[_extAssetHash];\\n            require(_asset.assetAddress != address(0), \\\"Asset not supported\\\");\\n\\n            // transfer the asset to this contract\\n            IERC20(_asset.assetAddress).transfer(\\n                msg.sender,\\n                uint256(-_extAmount)\\n            );\\n        }\\n    }\\n    \\n    function receiveCommitments(bytes32 _commitment) external {\\n        _receiveCommitments(_commitment);\\n    }\\n}\\n\",\"keccak256\":\"0x34bc0eb4aaad2876afb3c3055f9b1a1cd49cfef927696a6a6c24a2d197d09645\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMasp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Spend {\\n    bytes proof;\\n    uint256 nullifier;\\n    uint256[2] valueCommitment;\\n}\\n\\nstruct Output {\\n    bytes proof;\\n    uint256 commitment;\\n    uint256[2] valueCommitment;\\n    bytes encryptedOutput;\\n}\\n\\nstruct BridgeOut {\\n    bytes proof;\\n    uint256 chainId;\\n    address destination;\\n    bytes encryptedOutput;\\n    uint256[2] valueCommitment;\\n}\\n\\nstruct BridgeIn {\\n    uint256[2] valueCommitment;\\n}\\n\\ninterface IMasp {\\n    event NewCommitment(\\n        uint256 indexed commitment,\\n        uint256 indexed index,\\n        bytes encryptedOutput\\n    );\\n\\n    event NewBridgeout(\\n        uint256[2] valueCommitment,\\n        bytes encryptedOutput,\\n        uint256 chainId,\\n        address destination\\n    );\\n\\n    event NewNullifier(uint256 indexed nullifier);\\n\\n    event NewCommitmentReceived(bytes32 indexed commitment);\\n\\n    function transact(\\n        Spend[] calldata _spends,\\n        Output[] calldata _outputs,\\n        BridgeIn[] calldata _bridgeIns,\\n        BridgeOut[] calldata _bridgeOuts,\\n        uint256 _extAssetHash,\\n        int256 _extAmount,\\n        uint256[2] calldata _bpk,\\n        uint256 _root,\\n        uint256[2] calldata _R,\\n        uint256 _s,\\n        bytes calldata _hash\\n    ) external;\\n\\n    function receiveCommitments(bytes32 _commitment) external;\\n}\\n\",\"keccak256\":\"0x1eb19fb996207941ca23fa1687ff70314e3db14d0902f88aad95cbc373cc6c99\",\"license\":\"MIT\"},\"contracts/verifiers/BridgeoutVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract BridgeoutVerifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 11959349808641080378710627820561296566408094591790275298024191161732642180474;\\n    uint256 constant IC0y = 17156367992864612893527902806255735556283789316718806722633190738684978480380;\\n    \\n    uint256 constant IC1x = 12125708952400017605745737700147709448062702671026756580470414734811435591906;\\n    uint256 constant IC1y = 21518644787424059341796661800005908292503247924875695956021452568905203462320;\\n    \\n    uint256 constant IC2x = 18730136270635992968688102985343298301699514943447063097740285947474857150560;\\n    uint256 constant IC2y = 14514057882427646889308582114688597706187786118658098650620229270960638222191;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[2] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x0365cde2350b84cf7834a8ad15425cdd8e7753084f2b37eb2a7af7fc55186753\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/OutputVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract OutputVerifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 4127758615894809541092963480763473181392775981054159388990309821139618644716;\\n    uint256 constant IC0y = 7951558983875088804225287642310340456195856260741228854306527661812339803961;\\n    \\n    uint256 constant IC1x = 5458834067209346950596656406508475092283712836898910986038342860303823231439;\\n    uint256 constant IC1y = 9948801532033109700808294398168041713217185646267581322835617285636105595244;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xd74d1ac83953c608deb29e470a0c6ab84fcc471ad6b1bc13c448dde198df3260\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/SpendVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract SpendVerifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 21012000739560819142560423255928019433747389049417804685005853346299490572200;\\n    uint256 constant IC0y = 3110505566226718760385739709087438592945845328831699463083576662218091229871;\\n    \\n    uint256 constant IC1x = 19327189360385847724919098495693001434248018658209772205800586599839951879190;\\n    uint256 constant IC1y = 14864085053986614968409113362162378348043653796760683469901851492790138603530;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x7e1c13ca3e594bc97fa07bc1fc769bf0d9e9328b5dd6c1119f91e7664a7a6209\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081631633e3f514612dce575080631f79a1e914612d9d578063255a5d221461096f578063338c3bec1461095857806333d084bf1461093f57806338bf282e1461091e5780633e0223bf146108e1578063414a37ba146108a65780634e7eab6f1461084d5780634ecf518b1461080c5780635a129efe146107df5780636d9833e3146107b7578063808038e6146107835780638bb9385c1461063b57806390eeb02b1461061757806396cbc43a146105e0578063ba70f757146105ae578063c2b40ae414610582578063c56cda8f146103f1578063cd87a3b4146103d5578063d710442a1461029b578063e829558814610275578063ec7329591461023a578063ed33639f14610206578063f178e47c146101da578063f94bccd8146101735763fc7e9c6f1461014857600080fd5b3461016e57600060031936011261016e57602060035463ffffffff60405191831c168152f35b600080fd5b3461016e57602060031936011261016e57600435600052600760205260ff6040600020541660405160038210156101ab576020918152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b3461016e57602060031936011261016e5760043560005260016020526020604060002054604051908152f35b3461016e57600060031936011261016e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b3461016e57600060031936011261016e5760206040517f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c8152f35b3461016e57602060031936011261016e576020610293600435613579565b604051908152f35b3461016e57606060031936011261016e576004356024359073ffffffffffffffffffffffffffffffffffffffff80831680930361016e576044359160ff831680930361016e578160085416330361036b576040516001916102fb82612e30565b80825260208201958652604082019485526000526009602052604060002090518155019251167fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008454935160a01b16921617179055600080f35b608460405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b3461016e57600060031936011261016e57602060405160648152f35b3461016e57606060031936011261016e5760043567ffffffffffffffff811161016e57610422903690600401612f2a565b366043121561016e576040519061043882612e68565b60648236821161016e576024905b828210610572578460206104bb6101446104da61046289613bac565b919290966104cf73ffffffffffffffffffffffffffffffffffffffff60055416936104c56040519a8b998a987ff5c9d69e000000000000000000000000000000000000000000000000000000008a5260048a01906130a4565b60448801906130cc565b60c48601906130a4565b6101048401906130a4565b5afa90811561056657600091610537575b50156104f357005b606460405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206272696467656f75742070726f6f660000000000000000006044820152fd5b610559915060203d60201161055f575b6105518183612e84565b810190613047565b816104eb565b503d610547565b6040513d6000823e3d90fd5b8135815260209182019101610446565b3461016e57602060031936011261016e5760043560005260026020526020604060002054604051908152f35b3461016e57600060031936011261016e5763ffffffff6003541660005260026020526020604060002054604051908152f35b3461016e57600060031936011261016e57602073ffffffffffffffffffffffffffffffffffffffff60035460401c16604051908152f35b3461016e57600060031936011261016e57602063ffffffff60035416604051908152f35b3461016e57602060031936011261016e5760043580600052600760205260ff6040600020541660038110156101ab5761071957303f333f036106d557806000526007602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557ff3465f1ccaccf4decf86d59b4066bbd0a0ec98a0647882aa2c29cbf50da95754600080a2005b606460405162461bcd60e51b815260206004820152600a60248201527f6261642073656e646572000000000000000000000000000000000000000000006044820152fd5b608460405162461bcd60e51b815260206004820152602e60248201527f726563656976656420636f6d6d69746d656e7473206d75737420626520696e2060448201527f7468652049444c452073746174650000000000000000000000000000000000006064820152fd5b3461016e57600060031936011261016e57602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b3461016e57602060031936011261016e5760206107d56004356134a6565b6040519015158152f35b3461016e57602060031936011261016e5760206107d5600435600052600660205260ff6040600020541690565b3461016e57600060031936011261016e57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461016e57602060031936011261016e5760043560005260096020526060604060002060ff6001825492015460405192835273ffffffffffffffffffffffffffffffffffffffff8116602084015260a01c166040820152f35b3461016e57600060031936011261016e5760206040517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018152f35b3461016e57602060031936011261016e5760043573ffffffffffffffffffffffffffffffffffffffff8116810361016e576020903f604051908152f35b3461016e57604060031936011261016e5760206102936024356004356132e2565b3461016e5761095661095036612f48565b90613267565b005b3461016e5761095661096936612f48565b906131c7565b3461016e576101a060031936011261016e5760043567ffffffffffffffff811161016e576109a1903690600401612dff565b9060243567ffffffffffffffff811161016e576109c2903690600401612dff565b91909267ffffffffffffffff6044351161016e5736602360443501121561016e5767ffffffffffffffff604435600401351161016e573660246044356004013560061b60443501011161016e5760643567ffffffffffffffff811161016e57610a2f903690600401612dff565b949092366101041161016e57366101641161016e5767ffffffffffffffff610184351161016e573660236101843501121561016e5767ffffffffffffffff61018435600401351161016e5736602461018435600401356101843501011161016e57600060a43513612ccb575b610aa48361305f565b92610ab26040519485612e84565b8084526020840191368260051b82011161016e5780925b8260051b82018410612c565750505050610ae28461305f565b93610af06040519586612e84565b80855260208501368260051b84011161016e5782905b8260051b84018210612b975750505050610b256044356004013561305f565b91610b336040519384612e84565b60443560048101358452602401602084015b60246044356004013560061b60443501018210612b66575050610b678561305f565b94610b756040519687612e84565b80865260208601368260051b84011161016e5782905b8260051b84018210612a7e575050505060405192610ba884612e68565b60c4845b6101048210612a6e57505060405190610bc482612e68565b610124825b6101648210612a5e575050610bec36610184356004013560246101843501612ec5565b91610bf78451613c62565b92610c028351613c62565b918551808060011b0460021481151715611f315784518060011b9080820460021490151715611f3157808260011b018260011b11611f3157610c479160011b01613c62565b9660009960005b8851811015610cc657610c61818a613cfd565b5160200151610c70828a613cfd565b52610c7b818a613cfd565b516040015151610c8a8d613d11565b9c610c95908c613cfd565b52610ca0818a613cfd565b516040015160200151610cb28d613d11565b9c610cbd908c613cfd565b52600101610c4e565b508a9998979495969860005b8851811015610d4a57610ce5818a613cfd565b5160200151610cf4828a613cfd565b52610cff818a613cfd565b516040015151610d0e8d613d11565b9c610d19908c613cfd565b52610d24818a613cfd565b516040015160200151610d368d613d11565b9c610d41908c613cfd565b52600101610cd2565b508790610d6c610d9e8c610d728d610d6c8d6040519687956020870190613d3e565b90613d3e565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612e84565b60208151910120865160208801519060208110612a2e575b50036129ea57805192602082015160405194610dd186612e68565b85526020850152604051957f5d90c2d500000000000000000000000000000000000000000000000000000000875260408760048173__$028df8f3248521475cae26bff5f27a8183$__5af496871561056657610e7e976040916000916129cd575b5081517f2afb4927000000000000000000000000000000000000000000000000000000008152815160048201526020909101516024820152608435604482015297889081906064820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4968715610566576000976129ac575b506040517fbc1b392d00000000000000000000000000000000000000000000000000000000815260408160048173__$028df8f3248521475cae26bff5f27a8183$__5af49081156105665760009161298d575b50966040517fbc1b392d00000000000000000000000000000000000000000000000000000000815260408160048173__$028df8f3248521475cae26bff5f27a8183$__5af49081156105665760009161296e575b50966040517fbc1b392d00000000000000000000000000000000000000000000000000000000815260408160048173__$028df8f3248521475cae26bff5f27a8183$__5af49081156105665760009161294f575b50926040517fbc1b392d00000000000000000000000000000000000000000000000000000000815260408160048173__$028df8f3248521475cae26bff5f27a8183$__5af490811561056657600091612930575b509560009a5b8d518c10156110e7576040611085918f6110168f8492613cfd565b510151906020825192015183519261102d84612e68565b8352602080840191825284517f9f422d99000000000000000000000000000000000000000000000000000000008152835160048201529201516024830152915160448201529051606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af48015610566576001916000916110b8575b509b019a610ffb565b6110da915060403d6040116110e0575b6110d28183612e84565b810190613b84565b8f6110af565b503d6110c8565b95949392918d918d60009c5b8d8c51111561116157604061110f918f6110168f918492613cfd565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4801561056657600191600091611142575b509d019c6110f3565b61115b915060403d6040116110e0576110d28183612e84565b8f611139565b908b949392918d60009c5b8d8c5111156112d7576111e560408f6111888f91608092613cfd565b5101516020815191015182519161119e83612e68565b82526020820190815282517f5e20a7f10000000000000000000000000000000000000000000000000000000081529151600483015251602482015291829081906044820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4801561056657611266926040926000926112b8575b5082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4801561056657600191600091611299575b509d019c61116c565b6112b2915060403d6040116110e0576110d28183612e84565b8f611290565b6112d0919250833d85116110e0576110d28183612e84565b9038611213565b8c9b969798999a9b60009c5b8d8c5111156114a7576112f68e8d613cfd565b51516040516113096020820180936130a4565b6040815261131681612e30565b519020600052600760205260ff6040600020541660038110156101ab5760010361143d5761136b60408f60208f918061135261135b9285613cfd565b51515193613cfd565b5151015182519161119e83612e68565b038173__$028df8f3248521475cae26bff5f27a8183$__5af48015610566576113eb926040926000926112b8575082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af480156105665760019160009161141e575b509d019c6112e3565b611437915060403d6040116110e0576110d28183612e84565b8f611415565b608460405162461bcd60e51b815260206004820152602760248201527f76616c756520636f6d6d69746d656e7420686173206e6f74206265656e20726560448201527f63656976656421000000000000000000000000000000000000000000000000006064820152fd5b908c9b999a9b600060206040516114bd81612e68565b8281520152600060a43512156128fd576115037f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c90937886114fc60a435613077565b1115613d6b565b60a4356127c257506040517fbc1b392d00000000000000000000000000000000000000000000000000000000815260408160048173__$028df8f3248521475cae26bff5f27a8183$__5af4908115610566576115aa916040916000916127a5575b50965b81517f5e20a7f100000000000000000000000000000000000000000000000000000000815281516004820152602090910151602482015291829081906044820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af480156105665761162a92604092600092612786575082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4928315610566576116ac93604092600091612769575b5082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015292839081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af491821561056657600092612743575b50604080517f5e20a7f10000000000000000000000000000000000000000000000000000000081528251600482015260209092015160248301528180604481015b038173__$028df8f3248521475cae26bff5f27a8183$__5af480156105665761179592604092600092612724575082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af49283156105665761181693604092600091612707575082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015292839081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4918215610566576000926126e6575b50815181511491826126d3575b50501561268f5761198660407f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c909378881519461188486612e68565b7f0f157aac3718c993ce6137d3c6ac9587bd11c47182cea2312d705dbc0093139d86527f143e7b940a7846293635d558bb3e76613ea5c1ddb57128d155fd48ba8d404cf76020870152602087519701518351976118e089612e68565b8852602088015261193a60208251920151610d7285519761190089612e68565b8489528260208a01528a519260208c01519588519687956020870152898601526060850152608084015260a08084015260c0830190613db6565b6020815191012006938151809381927f5e20a7f1000000000000000000000000000000000000000000000000000000008352600483019190916020806040830194805184520151910152565b038173__$028df8f3248521475cae26bff5f27a8183$__5af490811561056657611a0291604091600091612672575b5081517f2afb492700000000000000000000000000000000000000000000000000000000815281516004820152602090910151602482015261016435604482015291829081906064820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af493841561056657611a8494604092600091612655575b5082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015293849081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af49283156105665760009361262d575b50604080517f2afb49270000000000000000000000000000000000000000000000000000000081528251600482015260209092015160248301526044820192909252908180606481015b038173__$028df8f3248521475cae26bff5f27a8183$__5af4801561056657611b769260409260009261260e575082517f9f422d9900000000000000000000000000000000000000000000000000000000815281516004820152602091820151602482015282516044820152910151606482015291829081906084820190565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4908115610566576000916125ef575b50516125ab57611bb0610104356134a6565b156125675760018451166124fd5760005b8351811015611c4057611bf06020611bd98387613cfd565b510151600052600660205260ff6040600020541690565b611bfc57600101611bc1565b606460405162461bcd60e51b815260206004820152601660248201527f496e70757420697320616c7265616479207370656e74000000000000000000006044820152fd5b50909260005b8351811015611c8a5780611c84611c5f60019387613cfd565b515160405190611c6e82612e4c565b6020611c7a858a613cfd565b51015182526131c7565b01611c46565b50838360005b8351811015611cd45780611cce611ca960019387613cfd565b515160405190611cb882612e4c565b6020611cc4858a613cfd565b5101518252613267565b01611c90565b50838360005b8351811015611d3057806020611cf260019387613cfd565b51015160005260066020526040600020827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905501611cda565b506000918491845b8151851015611fca576020611d4d8684613cfd565b51015191600186018611611f31576020611d6a6001880183613cfd565b510151936003549463ffffffff611da2817f000000000000000000000000000000000000000000000000000000000000000016613e14565b1663ffffffff8760201c1614611f6057611dc990637fffffff8760219795971c16936132e2565b936001945b63ffffffff86169063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016821015611e5e57637fffffff611e3d63ffffffff9360019384891615600014611e4b5780611e2a83613579565b92600052856020526040600020556132e2565b95821c169601169492611dce565b90600052836020526040600020546132e2565b9298949550509594915060035463ffffffff60018183160111611f31578063ffffffff6064816001817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009616011606169182911617600355600052600260205260406000205563ffffffff6002818360201c160111611f31577fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff67ffffffff00000000600263ffffffff6003549460201c160160201b16911617600355600281018111611f315760020193919290611d38565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b608460405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201527f7665732063616e206265206164646564000000000000000000000000000000006064820152fd5b919060005b84518110156120445780611fe560019287613cfd565b5151604051611ff86020820180936130a4565b6040815261200581612e30565b5190206000526007602052604060002060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905501611fcf565b508260005b83518110156121b75773ffffffffffffffffffffffffffffffffffffffff60406120738387613cfd565b510151163f303f036121735773ffffffffffffffffffffffffffffffffffffffff60406120a08387613cfd565b510151169060806120b18287613cfd565b5101516040516120c56020820180936130a4565b604081526120d281612e30565b519020823b1561016e576000926024849260405195869384927f8bb9385c00000000000000000000000000000000000000000000000000000000845260048401525af180156105665761212a575b6001915001612049565b67ffffffffffffffff821161214457600191604052612120565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152601f60248201527f64657374696e6174696f6e20636f6e747261637420697320696e76616c6964006044820152fd5b509060206121c482613cb1565b5101519063ffffffff60035460201c169163ffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe840111611f3157606061220d83613cb1565b510151907fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf03604051602081528061227163ffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe890116956020830190613db6565b0390a3602061227f82613ced565b5101519063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840111611f31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60606122fd7fe5b9fcee308349a880a3033e7bf8f0d7192658e7dbdaf7481ecc63f3d7addf0393613ced565b5101519361232063ffffffff604051938493602085520116956020830190613db6565b0390a360005b82518110156123de57807f9492b98c43599380c36d44a3d4ad1edabc09151648e55ceb516f076df158a2136123b9608061236260019588613cfd565b51015160606123718589613cfd565b5101516020612380868a613cfd565b510151906123ca73ffffffffffffffffffffffffffffffffffffffff60406123a8898d613cfd565b5101511691604051958680966130a4565b60a0604086015260a0850190613db6565b91606084015260808301520390a101612326565b5060005b8151811015612428578060206123fa60019385613cfd565b5101517f9218fa47e982bf1ded9b6823b77dbac4a5db62fc73f8efc325c7de424a411802600080a2016123e2565b600060a4351261243457005b6084356000526009602052600060206040822060016040519161245683612e30565b80548352015461249273ffffffffffffffffffffffffffffffffffffffff9283831690604060ff8783019584875260a01c169101521515612ffc565b511660446124a160a435613077565b60405194859384927fa9059cbb00000000000000000000000000000000000000000000000000000000845233600485015260248401525af18015610566576124e557005b6109569060203d60201161055f576105518183612e84565b608460405162461bcd60e51b815260206004820152602160248201527f6f757470757473206d75737420626520696e206d756c7469706c6573206f662060448201527f32000000000000000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206d65726b6c6520726f6f74000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601660248201527f7369676e6174757265206973206e6f742076616c6964000000000000000000006044820152fd5b612608915060403d6040116110e0576110d28183612e84565b85611b9e565b612626919250833d85116110e0576110d28183612e84565b9088611213565b60409193509161264c611af693833d85116110e0576110d28183612e84565b93915091611aac565b61266c9150833d85116110e0576110d28183612e84565b8a611a31565b6126899150823d84116110e0576110d28183612e84565b8a6119b5565b606460405162461bcd60e51b815260206004820152601460248201527f42616c616e636520436865636b204661696c65640000000000000000000000006044820152fd5b602091925081015191015114888061184b565b61270091925060403d6040116110e0576110d28183612e84565b908961183e565b61271e9150833d85116110e0576110d28183612e84565b8c611659565b61273c919250833d85116110e0576110d28183612e84565b908d611213565b611715919250612761604091823d84116110e0576110d28183612e84565b9291506116d4565b6127809150833d85116110e0576110d28183612e84565b8e611659565b61279e919250833d85116110e0576110d28183612e84565b908f611213565b6127bc9150823d84116110e0576110d28183612e84565b8f611564565b600060a43512156128cc576127d860a435613077565b7f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c909378881810311611f3157612879917f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c9093788604092810306905b825193849283927f2afb492700000000000000000000000000000000000000000000000000000000845260048401604090939291936020606082019580518352015160208201520152565b038173__$028df8f3248521475cae26bff5f27a8183$__5af4908115610566576115aa916040916000916128af575b5096611567565b6128c69150823d84116110e0576110d28183612e84565b8f6128a8565b6040612879917f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c909378860a435069061282e565b61292b7f30644e72e131a029b85045b68181585d59f76dc1c90770533b94bee1c909378860a4351115613d6b565b611503565b612949915060403d6040116110e0576110d28183612e84565b8d610ff5565b612968915060403d6040116110e0576110d28183612e84565b8c610fa1565b612987915060403d6040116110e0576110d28183612e84565b8b610f4d565b6129a6915060403d6040116110e0576110d28183612e84565b8a610ef9565b6129c691975060403d6040116110e0576110d28183612e84565b9589610ea6565b6129e49150823d84116110e0576110d28183612e84565b8b610e32565b606460405162461bcd60e51b815260206004820152601160248201527f486173686573206d757374206d617463680000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1689610db6565b8135815260209182019101610bc9565b8135815260209182019101610bac565b813567ffffffffffffffff811161016e5760c081860136031261016e57604051918260a081011067ffffffffffffffff60a0850111176121445760a083016040528186013567ffffffffffffffff811161016e57612ae190369084890101612f2a565b8352858201602081810135908501526040013573ffffffffffffffffffffffffffffffffffffffff8116810361016e5760408401526060928383880101359267ffffffffffffffff841161016e57602094612b4286953690848c0101612f2a565b90830152612b576080918236918b0101612fb7565b90820152815201910190610b8b565b60408236031261016e5760206040918251612b8081612e4c565b612b8a3686612fb7565b8152815201910190610b45565b813567ffffffffffffffff811161016e5760a081860136031261016e576040519182608081011067ffffffffffffffff60808501111761214457608083016040528186013567ffffffffffffffff811161016e57612bfa90369084890101612f2a565b8352602082870101356020840152612c1736604084890101612fb7565b6040840152608082870101359267ffffffffffffffff841161016e57612c4660209493859436918a0101612f2a565b6060820152815201910190610b06565b833567ffffffffffffffff811161016e57820160808136031261016e5760405191612c8083612e30565b81359267ffffffffffffffff841161016e57612cbb60209493612ca7869536908301612f2a565b835284810135858401526040369101612fb7565b6040820152815201930192610ac9565b60843560005260096020526000602060408220600160405191612ced83612e30565b805483520154612d2973ffffffffffffffffffffffffffffffffffffffff9283831690604060ff8783019584875260a01c169101521515612ffc565b51166064604051809481937f23b872dd00000000000000000000000000000000000000000000000000000000835233600484015230602484015260a43560448401525af1801561056657612d7e575b50610a9b565b612d969060203d60201161055f576105518183612e84565b5086612d78565b3461016e57602060031936011261016e576004356000526006602052602060ff604060002054166040519015158152f35b3461016e57600060031936011261016e5760209073ffffffffffffffffffffffffffffffffffffffff600454168152f35b9181601f8401121561016e5782359167ffffffffffffffff831161016e576020808501948460051b01011161016e57565b6060810190811067ffffffffffffffff82111761214457604052565b6020810190811067ffffffffffffffff82111761214457604052565b6040810190811067ffffffffffffffff82111761214457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761214457604052565b92919267ffffffffffffffff82116121445760405191612f0d60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612e84565b82948184528183011161016e578281602093846000960137010152565b9080601f8301121561016e57816020612f4593359101612ec5565b90565b90604060031983011261016e5760043567ffffffffffffffff811161016e5782612f7491600401612f2a565b91806043121561016e5760405190612f8b82612e4c565b8160449160441161016e576024905b828210612fa75750505090565b8135815260209182019101612f9a565b9080601f8301121561016e5760405191612fd083612e68565b82906040810192831161016e57905b828210612fec5750505090565b8135815260209182019101612fdf565b1561300357565b606460405162461bcd60e51b815260206004820152601360248201527f4173736574206e6f7420737570706f72746564000000000000000000000000006044820152fd5b9081602091031261016e5751801515810361016e5790565b67ffffffffffffffff81116121445760051b60200190565b7f80000000000000000000000000000000000000000000000000000000000000008114611f315760000390565b6000915b600283106130b557505050565b6001908251815260208091019201920191906130a8565b906000916000915b6002808410156131195782518590835b838310613102575050505060206040600192019201920191906130d4565b6001908251815260208091019201920191906130e4565b5050505050565b90949392613152906131486101009461313e8561012081019a6130a4565b60408501906130cc565b60c08301906130a4565b01906000915b6001831061316557505050565b600190825181526020809101920192019190613158565b1561318357565b606460405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152fd5b6131d2602091613bac565b919073ffffffffffffffffffffffffffffffffffffffff60035492613226604051978896879586947f43753b4d00000000000000000000000000000000000000000000000000000000865260048601613120565b039260401c165afa80156105665761324691600091613248575b5061317c565b565b613261915060203d60201161055f576105518183612e84565b38613240565b613272602091613bac565b919073ffffffffffffffffffffffffffffffffffffffff60045416916132c7604051968795869485947f43753b4d00000000000000000000000000000000000000000000000000000000865260048601613120565b03915afa80156105665761324691600091613248575061317c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180821015613462578210156133f8576040519061331f82612e68565b604036833781526020918282015260008273ffffffffffffffffffffffffffffffffffffffff825416926040519384917f299e56600000000000000000000000000000000000000000000000000000000083526004830185905b600282106133df57505050816044915afa9283156133d257819361339e575b50505090565b9091809350813d83116133cb575b6133b68183612e84565b810103126133c8575051388080613398565b80fd5b503d6133ac565b50604051903d90823e3d90fd5b8251815288958895509283019260019092019101613379565b608460405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c60448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152602060248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152fd5b80156135735760035460019163ffffffff9182168084805b6134ce575b505050505050600090565b15613564575b6000908481169081835260026020526040832054851461355b57859115613553575b168015613526577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190856134be565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5060646134f6565b50505050505090565b81848216036134d457806134c3565b50600090565b806135a357507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c90565b600181036135d057507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f890565b600281036135fd57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc62276590565b6003810361362a57507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee90565b6004810361365757507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa501358790565b6005810361368457507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc90565b600681036136b157507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f90565b600781036136de57507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef99921990565b6008810361370b57507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d90565b6009810361373857507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce90565b600a810361376557507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad790565b600b810361379257507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b4790565b600c81036137bf57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b90565b600d81036137ec57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d36690565b600e810361381957507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef90565b600f810361384657507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca90565b6010810361387357507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec90565b6011810361389f57507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b90565b601281036138cc57507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f90565b601381036138f957507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b6390565b6014810361392657507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb90565b6015810361395357507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b1327990565b6016810361398057507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff90565b601781036139ad57507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d996290565b601881036139da57507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc1090565b60198103613a0757507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a01390565b601a8103613a3457507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac1490565b601b8103613a6157507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc090565b601c8103613a8e57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d5090565b601d8103613abb57507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f18790565b601e8103613ae857507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa090565b601f8103613b1557507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad0690565b602003613b40577f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e690565b606460405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152fd5b9081604091031261016e57602060405191613b9e83612e68565b805183520151602082015290565b604091825190613bbb82612e68565b833683378193805192613bcd84612e68565b60005b828110613c4657508394825194613be686612e68565b8336873785825191836020936101009182918101031261016e5783850151968501519460608101519360808201519260a08301519260c08101519160e0820151910151928887519701519389820152528682015252838201525282015252565b6020908351613c5481612e68565b843682378187015201613bd0565b90613c6c8261305f565b613c796040519182612e84565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613ca7829461305f565b0190602036910137565b805115613cbe5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015613cbe5760400190565b8051821015613cbe5760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f315760010190565b805160208092019160005b828110613d57575050505090565b835185529381019392810192600101613d49565b15613d7257565b606460405162461bcd60e51b815260206004820152602060248201527f56616c7565206d757374206e6f742062652067726561746572207468616e206e6044820152fd5b919082519283825260005b848110613e005750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201613dc1565b8015613e345760ff8111611f31576001901b9063ffffffff8211611f3157565b5060019056fea2646970667358221220fe2b48896989165932b59c8ffd7df413291e9294ef6c95b5b6273e9cc8bcc29364736f6c63430008180033",
  "libraries": {
    "EdOnBN254": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns Poseidon(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1479,
        "contract": "contracts/RK.sol:RK",
        "label": "hasher",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHasher)1470"
      },
      {
        "astId": 1485,
        "contract": "contracts/RK.sol:RK",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1489,
        "contract": "contracts/RK.sol:RK",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1495,
        "contract": "contracts/RK.sol:RK",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1498,
        "contract": "contracts/RK.sol:RK",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 2149,
        "contract": "contracts/RK.sol:RK",
        "label": "spendVerifier",
        "offset": 8,
        "slot": "3",
        "type": "t_contract(SpendVerifier)4263"
      },
      {
        "astId": 2152,
        "contract": "contracts/RK.sol:RK",
        "label": "outputVerifier",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(OutputVerifier)4166"
      },
      {
        "astId": 2155,
        "contract": "contracts/RK.sol:RK",
        "label": "bridgeoutVerifier",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(BridgeoutVerifier)4069"
      },
      {
        "astId": 2159,
        "contract": "contracts/RK.sol:RK",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2164,
        "contract": "contracts/RK.sol:RK",
        "label": "receivedCommitments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_enum(ValueCommitmentState)2146)"
      },
      {
        "astId": 3556,
        "contract": "contracts/RK.sol:RK",
        "label": "owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3600,
        "contract": "contracts/RK.sol:RK",
        "label": "assetToAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(SupportedAsset)3595_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BridgeoutVerifier)4069": {
        "encoding": "inplace",
        "label": "contract BridgeoutVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IHasher)1470": {
        "encoding": "inplace",
        "label": "contract IHasher",
        "numberOfBytes": "20"
      },
      "t_contract(OutputVerifier)4166": {
        "encoding": "inplace",
        "label": "contract OutputVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(SpendVerifier)4263": {
        "encoding": "inplace",
        "label": "contract SpendVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ValueCommitmentState)2146": {
        "encoding": "inplace",
        "label": "enum MultiAssetShieldedPool.ValueCommitmentState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(ValueCommitmentState)2146)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MultiAssetShieldedPool.ValueCommitmentState)",
        "numberOfBytes": "32",
        "value": "t_enum(ValueCommitmentState)2146"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(SupportedAsset)3595_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RK.SupportedAsset)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportedAsset)3595_storage"
      },
      "t_struct(SupportedAsset)3595_storage": {
        "encoding": "inplace",
        "label": "struct RK.SupportedAsset",
        "members": [
          {
            "astId": 3590,
            "contract": "contracts/RK.sol:RK",
            "label": "assetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3592,
            "contract": "contracts/RK.sol:RK",
            "label": "assetAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3594,
            "contract": "contracts/RK.sol:RK",
            "label": "decimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}